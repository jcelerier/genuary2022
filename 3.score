{"Document":{"ObjectName":"Scenario::ScenarioDocumentModel","id":1,"BaseScenario":{"ObjectName":"Scenario::BaseScenario","id":0,"Constraint":{"ObjectName":"Scenario::IntervalModel","id":0,"Metadata":{"ScriptingName":"3","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[{"uuid":"25c64b87-a44a-4fed-9f60-0a48906fd3ec","ObjectName":"Process::ProcessModel","id":17,"Metadata":{"ScriptingName":"Micromap","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10584000000,"Height":300.0,"StartOffset":0,"LoopDuration":10584000000,"Pos":[504.22176339285716,-27.821133370535726],"Size":[115.0,24.0],"Loops":false,"Inlets":[{"uuid":"769dd38a-bfb3-4dc6-b52a-b6abb7afe2a3","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"in","Exposed":"in"},{"uuid":"9ae797ea-d94c-4792-acec-9ec1932bae5d","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"Expression","Exposed":"expression","Value":{"String":"xv[0] / 2000"},"Domain":{}}],"Outlets":[{"uuid":"cff96158-cc72-46d7-99dc-b6038171375b","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"out","Exposed":"out"}]},{"uuid":"cb6b50d3-82c0-4356-a282-317da8b8022f","ObjectName":"JSFX","id":15,"Metadata":{"ScriptingName":"hpflpf","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10584000000,"Height":300.0,"StartOffset":0,"LoopDuration":10584000000,"Pos":[137.4820870535716,-69.89933035714274],"Size":[100.0,111.0],"Loops":false,"Script":"/home/jcelerier/Documents/ossia/score/packages/jsfx/sstillwell/hpflpf.jsfx","Chunk":"AAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAQEqXFUAAAAAAAAABQI9AAAAAAAAAAAACwCyzZAAAAAA=","Inlets":[{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},{"uuid":"c18adc77-e0e0-4ddf-a46c-43cb0719a890","ObjectName":"Inlet","id":1,"Hidden":false,"Custom":"MIDI in","Exposed":"midi in"},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":4,"Hidden":true,"Custom":"HPF","Exposed":"hpf","Value":{"Float":53.180335998535156},"Domain":{"Float":{"Min":0.0,"Max":1000.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":5,"Hidden":true,"Custom":"LPF","Exposed":"lpf","Value":{"Float":1000.0},"Domain":{"Float":{"Min":1000.0,"Max":22000.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":6,"Hidden":true,"Custom":"Gain","Exposed":"gain","Value":{"Float":-14.350372314453125},"Domain":{"Float":{"Min":-20.0,"Max":20.0}}}],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":2,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":30000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":30001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":false},{"uuid":"d8a3ed3d-b9c2-46f2-bdb3-d282a48481c6","ObjectName":"Outlet","id":3,"Hidden":false,"Custom":"MIDI out","Exposed":"midi out"}]},{"uuid":"ed511605-8265-4b2c-8c4b-d3b189539b3b","ObjectName":"Process::ProcessModel","id":13,"Metadata":{"ScriptingName":"Pitch detector","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10584000000,"Height":300.0,"StartOffset":0,"LoopDuration":10584000000,"Pos":[328.8055245535714,-28.87785770089286],"Size":[138.90625,22.0],"Loops":false,"Inlets":[{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"in","Exposed":"in"}],"Outlets":[{"uuid":"cff96158-cc72-46d7-99dc-b6038171375b","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"out","Exposed":"out"}]},{"uuid":"cb6b50d3-82c0-4356-a282-317da8b8022f","ObjectName":"JSFX","id":12,"Metadata":{"ScriptingName":"masterLimiter","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10584000000,"Height":300.0,"StartOffset":0,"LoopDuration":10584000000,"Pos":[-123.6686941964286,45.28362165178581],"Size":[191.5625,185.0],"Loops":false,"Script":"/home/jcelerier/Documents/ossia/score/packages/jsfx/loser/masterLimiter.jsfx","Chunk":"AAAAAAAAAAAAAAAAAAAABwAAAAAAAAAAwCDDByAAAAAAAAABQGkAAAAAAAAAAAACQFkAAAAAAAAAAAADAAAAAAAAAAAAAAAEQG9AAAAAAAAAAAAFv7mZmZmZmZoAAAAGv/F2grlO+xQ=","Inlets":[{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},{"uuid":"c18adc77-e0e0-4ddf-a46c-43cb0719a890","ObjectName":"Inlet","id":1,"Hidden":false,"Custom":"MIDI in","Exposed":"midi in"},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":4,"Hidden":true,"Custom":"Threshold (dB)","Exposed":"threshold (db)","Value":{"Float":-8.380913734436035},"Domain":{"Float":{"Min":-20.0,"Max":-0.10000000149011612}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":5,"Hidden":true,"Custom":"Look Ahead (�s)","Exposed":"look ahead (_s)","Value":{"Float":200.0},"Domain":{"Float":{"Min":0.0,"Max":1000.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":6,"Hidden":true,"Custom":"Attack (�s)","Exposed":"attack (_s)","Value":{"Float":100.0},"Domain":{"Float":{"Min":0.0,"Max":1000.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":7,"Hidden":true,"Custom":"Hold (ms)","Exposed":"hold (ms)","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":10.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":8,"Hidden":true,"Custom":"Release (ms)","Exposed":"release (ms)","Value":{"Float":250.0},"Domain":{"Float":{"Min":0.0,"Max":1000.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":9,"Hidden":true,"Custom":"Limit (dB)","Exposed":"limit (db)","Value":{"Float":-0.10000000149011612},"Domain":{"Float":{"Min":-6.0,"Max":0.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":10,"Hidden":true,"Custom":"Reduction","Exposed":"reduction","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":0.0}}}],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":2,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":30000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":30001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},{"uuid":"d8a3ed3d-b9c2-46f2-bdb3-d282a48481c6","ObjectName":"Outlet","id":3,"Hidden":false,"Custom":"MIDI out","Exposed":"midi out"}]},{"uuid":"63174570-d608-44bf-a9cb-e6f5a11f73cc","ObjectName":"Sound","id":11,"Metadata":{"ScriptingName":"KOMAROV2","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10584000000,"Height":300.0,"StartOffset":0,"LoopDuration":23493657600,"Pos":[-375.2926618303572,48.4537946428572],"Size":[200.0,100.0],"Loops":true,"File":"/home/jcelerier/Documents/ossia/score/packages/space-sounds/KorablSputnik4March9.mp3","Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":false},"Upmix":2,"Start":0,"Mode":0,"Tempo":120.0},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":10,"Metadata":{"ScriptingName":"Dither-Bayer","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10584000000,"Height":300.0,"StartOffset":0,"LoopDuration":10584000000,"Pos":[832.5375,-187.39],"Size":[113.953125,74.0],"Loops":false,"Vertex":"","Fragment":"/*{\n    \"CATEGORIES\": [\n        \"Halftone Effect\",\n        \"Retro\"\n    ],\n    \"CREDIT\": \"Hugh Kennedy, adapted by David Lublin\",\n    \"DESCRIPTION\": \"Bayer style dithering\",\n    \"INPUTS\": [\n        {\n            \"NAME\": \"inputImage\",\n            \"TYPE\": \"image\"\n        },\n        {\n            \"DEFAULT\": 0,\n            \"MAX\": 1,\n            \"MIN\": 0,\n            \"NAME\": \"colorize\",\n            \"TYPE\": \"float\"\n        },\n        {\n            \"DEFAULT\": 2,\n            \"LABELS\": [\n                \"2x2\",\n                \"4x4\",\n                \"8x8\"\n            ],\n            \"NAME\": \"matrixMode\",\n            \"TYPE\": \"long\",\n            \"VALUES\": [\n                0,\n                1,\n                2\n            ]\n        }\n    ],\n    \"ISFVSN\": \"2\"\n}\n*/\n\n\n\n//\tbased on https://github.com/hughsk/glsl-dither\n\nfloat luma(vec3 color)\t{\n\treturn (color.r + color.g + color.b) / 3.0;\t\n}\n\nfloat luma(vec4 color)\t{\n\treturn color.a * (color.r + color.g + color.b) / 3.0;\t\n}\n\nfloat dither8x8(vec2 position, float brightness) {\n  int x = int(mod(position.x, 8.0));\n  int y = int(mod(position.y, 8.0));\n  int index = x + y * 8;\n  float limit = 0.0;\n\n  if (x < 8) {\n    if (index == 0) limit = 0.015625;\n    if (index == 1) limit = 0.515625;\n    if (index == 2) limit = 0.140625;\n    if (index == 3) limit = 0.640625;\n    if (index == 4) limit = 0.046875;\n    if (index == 5) limit = 0.546875;\n    if (index == 6) limit = 0.171875;\n    if (index == 7) limit = 0.671875;\n    if (index == 8) limit = 0.765625;\n    if (index == 9) limit = 0.265625;\n    if (index == 10) limit = 0.890625;\n    if (index == 11) limit = 0.390625;\n    if (index == 12) limit = 0.796875;\n    if (index == 13) limit = 0.296875;\n    if (index == 14) limit = 0.921875;\n    if (index == 15) limit = 0.421875;\n    if (index == 16) limit = 0.203125;\n    if (index == 17) limit = 0.703125;\n    if (index == 18) limit = 0.078125;\n    if (index == 19) limit = 0.578125;\n    if (index == 20) limit = 0.234375;\n    if (index == 21) limit = 0.734375;\n    if (index == 22) limit = 0.109375;\n    if (index == 23) limit = 0.609375;\n    if (index == 24) limit = 0.953125;\n    if (index == 25) limit = 0.453125;\n    if (index == 26) limit = 0.828125;\n    if (index == 27) limit = 0.328125;\n    if (index == 28) limit = 0.984375;\n    if (index == 29) limit = 0.484375;\n    if (index == 30) limit = 0.859375;\n    if (index == 31) limit = 0.359375;\n    if (index == 32) limit = 0.0625;\n    if (index == 33) limit = 0.5625;\n    if (index == 34) limit = 0.1875;\n    if (index == 35) limit = 0.6875;\n    if (index == 36) limit = 0.03125;\n    if (index == 37) limit = 0.53125;\n    if (index == 38) limit = 0.15625;\n    if (index == 39) limit = 0.65625;\n    if (index == 40) limit = 0.8125;\n    if (index == 41) limit = 0.3125;\n    if (index == 42) limit = 0.9375;\n    if (index == 43) limit = 0.4375;\n    if (index == 44) limit = 0.78125;\n    if (index == 45) limit = 0.28125;\n    if (index == 46) limit = 0.90625;\n    if (index == 47) limit = 0.40625;\n    if (index == 48) limit = 0.25;\n    if (index == 49) limit = 0.75;\n    if (index == 50) limit = 0.125;\n    if (index == 51) limit = 0.625;\n    if (index == 52) limit = 0.21875;\n    if (index == 53) limit = 0.71875;\n    if (index == 54) limit = 0.09375;\n    if (index == 55) limit = 0.59375;\n    if (index == 56) limit = 1.0;\n    if (index == 57) limit = 0.5;\n    if (index == 58) limit = 0.875;\n    if (index == 59) limit = 0.375;\n    if (index == 60) limit = 0.96875;\n    if (index == 61) limit = 0.46875;\n    if (index == 62) limit = 0.84375;\n    if (index == 63) limit = 0.34375;\n  }\n\n  return brightness < limit ? 0.0 : 1.0;\n}\n\nvec3 dither8x8(vec2 position, vec3 color) {\n  return color * dither8x8(position, luma(color));\n}\n\nvec4 dither8x8(vec2 position, vec4 color) {\n  return vec4(color.rgb * dither8x8(position, luma(color)), 1.0);\n}\n\nfloat dither4x4(vec2 position, float brightness) {\n  int x = int(mod(position.x, 4.0));\n  int y = int(mod(position.y, 4.0));\n  int index = x + y * 4;\n  float limit = 0.0;\n\n  if (x < 8) {\n    if (index == 0) limit = 0.0625;\n    if (index == 1) limit = 0.5625;\n    if (index == 2) limit = 0.1875;\n    if (index == 3) limit = 0.6875;\n    if (index == 4) limit = 0.8125;\n    if (index == 5) limit = 0.3125;\n    if (index == 6) limit = 0.9375;\n    if (index == 7) limit = 0.4375;\n    if (index == 8) limit = 0.25;\n    if (index == 9) limit = 0.75;\n    if (index == 10) limit = 0.125;\n    if (index == 11) limit = 0.625;\n    if (index == 12) limit = 1.0;\n    if (index == 13) limit = 0.5;\n    if (index == 14) limit = 0.875;\n    if (index == 15) limit = 0.375;\n  }\n\n  return brightness < limit ? 0.0 : 1.0;\n}\n\nvec3 dither4x4(vec2 position, vec3 color) {\n  return color * dither4x4(position, luma(color));\n}\n\nvec4 dither4x4(vec2 position, vec4 color) {\n  return vec4(color.rgb * dither4x4(position, luma(color)), 1.0);\n}\n\nfloat dither2x2(vec2 position, float brightness) {\n  int x = int(mod(position.x, 2.0));\n  int y = int(mod(position.y, 2.0));\n  int index = x + y * 2;\n  float limit = 0.0;\n\n  if (x < 8) {\n    if (index == 0) limit = 0.25;\n    if (index == 1) limit = 0.75;\n    if (index == 2) limit = 1.00;\n    if (index == 3) limit = 0.50;\n  }\n\n  return brightness < limit ? 0.0 : 1.0;\n}\n\nvec3 dither2x2(vec2 position, vec3 color) {\n  return color * dither2x2(position, luma(color));\n}\n\nvec4 dither2x2(vec2 position, vec4 color) {\n  return vec4(color.rgb * dither2x2(position, luma(color)), 1.0);\n}\n\n\nvoid main()\t{\n\tvec4\t\tinputPixelColor = vec4(0.0);\n\tvec2\t\tloc = gl_FragCoord.xy;\n\t//\tboth of these are the same\n\tinputPixelColor = IMG_THIS_PIXEL(inputImage);\n\t\n\tfloat\t\tval = 1.0;\n\t\n\tif (matrixMode == 0)\t{\n\t\tval = dither2x2(loc, luma(inputPixelColor));\n\t}\n\telse if (matrixMode == 1)\t{\n\t\tval = dither4x4(loc, luma(inputPixelColor));\n\t}\n\telse if (matrixMode == 2)\t{\n\t\tval = dither8x8(loc, luma(inputPixelColor));\n\t}\n\t\n\tinputPixelColor = inputPixelColor * vec4(val,val,val,1.0);\n\n\tgl_FragColor = mix(vec4(val,val,val,inputPixelColor.a),inputPixelColor,colorize);\n}\n","Inlets":[{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":0,"Hidden":false},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"colorize","Exposed":"colorize","Value":{"Float":0.3427083194255829},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":2,"Hidden":true,"Custom":"matrixMode","Exposed":"matrixmode","Value":{"Int":0},"Domain":{"Int":{"Values":[0,1,2]}},"Values":[["2x2",{"Int":0}],["4x4",{"Int":1}],["8x8",{"Int":2}]]}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":0,"Hidden":false,"Address":"window:/"}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":8,"Metadata":{"ScriptingName":"Exposure Adjust.1","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10584000000,"Height":300.0,"StartOffset":0,"LoopDuration":10584000000,"Pos":[676.4125,-186.39],"Size":[145.375,37.0],"Loops":false,"Vertex":"","Fragment":"/*{\n\t\"CREDIT\": \"by carter rosenberg\",\n\t\"ISFVSN\": \"2\",\n\t\"CATEGORIES\": [\n\t\t\"Color Adjustment\"\n\t],\n\t\"INPUTS\": [\n\t\t{\n\t\t\t\"NAME\": \"inputImage\",\n\t\t\t\"TYPE\": \"image\"\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"inputEV\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"MIN\": -10.0,\n\t\t\t\"MAX\": 10.0,\n\t\t\t\"DEFAULT\": 0.5\n\t\t}\n\t]\n}*/\n\n\n\nvoid main() {\n\t//\tbased on\n\t//\thttps://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CoreImageFilterReference/Reference/reference.html#//apple_ref/doc/filter/ci/CIExposureAdjust\n\tvec4\t\ttmpColorA = IMG_THIS_PIXEL(inputImage);\n\ttmpColorA.rgb = tmpColorA.rgb * pow(2.0, inputEV);\n\tgl_FragColor = tmpColorA;\n}\n","Inlets":[{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":0,"Hidden":false},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"inputEV","Exposed":"inputev","Value":{"Float":3.5625},"Domain":{"Float":{"Min":-10.0,"Max":10.0}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":0,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":7,"Metadata":{"ScriptingName":"Multi Hue Shift","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10584000000,"Height":300.0,"StartOffset":0,"LoopDuration":10584000000,"Pos":[515.35,-186.39],"Size":[127.125,111.0],"Loops":false,"Vertex":"","Fragment":"/*{\n\t\"DESCRIPTION\": \"Performs hue shifts of different amounts depending on brightness levels\",\n\t\"CREDIT\": \"VIDVOX\",\n\t\"ISFVSN\": \"2\",\n\t\"CATEGORIES\": [\n\t\t\"Color Effect\"\n\t],\n\t\"INPUTS\": [\n\t\t{\n\t\t\t\"NAME\": \"inputImage\",\n\t\t\t\"TYPE\": \"image\"\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"shiftLow\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 0.0,\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 1.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"shiftMid\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 0.0,\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 1.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"shiftHigh\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 0.0,\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 1.0\n\t\t}\n\t]\n\t\n}*/\n\n\n\nvec3 rgb2hsv(vec3 c)\t{\n\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\t//vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n\t//vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\tvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n\tvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n\t\n\tfloat d = q.x - min(q.w, q.y);\n\tfloat e = 1.0e-10;\n\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\t{\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\n\nvoid main()\t{\n\tvec4\t\tinputPixelColor = IMG_THIS_PIXEL(inputImage);\n\n\t//\tdon't bother doing anything if we're not shifting anything\n\tif ((shiftLow > 0.0)||(shiftMid > 0.0)||(shiftHigh > 0.0))\t{\n\t\t//\twhat is the brightness?\n\t\tfloat\t\tval = (inputPixelColor.r + inputPixelColor.g + inputPixelColor.b) / 3.0;\n\t\t\n\t\t//\thow much do we shift by based on that brightness?\n\t\tif (val < 0.25)\t{\n\t\t\tval = shiftLow;\n\t\t}\n\t\telse if (val < 0.5)\t{\n\t\t\tval = mix(shiftLow, shiftMid, (val-0.25) * 4.0);\n\t\t}\n\t\telse if (val < 0.75)\t{\n\t\t\tval = mix(shiftMid, shiftHigh, (val-0.5) * 4.0);\n\t\t}\n\t\telse\t{\n\t\t\tval = shiftHigh;\n\t\t}\n\t\t\n\t\tinputPixelColor.rgb = rgb2hsv(inputPixelColor.rgb);\n\t\tinputPixelColor.r = fract(inputPixelColor.r + val);\n\t\tinputPixelColor.rgb = hsv2rgb(inputPixelColor.rgb);\n\t\t\n\t}\n\t\n\tgl_FragColor = inputPixelColor;\n}\n","Inlets":[{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":0,"Hidden":false},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"shiftLow","Exposed":"shiftlow","Value":{"Float":0.26249998807907104},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":2,"Hidden":true,"Custom":"shiftMid","Exposed":"shiftmid","Value":{"Float":0.512499988079071},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":3,"Hidden":true,"Custom":"shiftHigh","Exposed":"shifthigh","Value":{"Float":0.3958333432674408},"Domain":{"Float":{"Min":0.0,"Max":1.0}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":0,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":6,"Metadata":{"ScriptingName":"Luminance Posterize","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10584000000,"Height":300.0,"StartOffset":0,"LoopDuration":10584000000,"Pos":[352.2875,-182.39],"Size":[160.84375,37.0],"Loops":false,"Vertex":"","Fragment":"/*{\n    \"CATEGORIES\": [\n        \"Color Effect\",\n        \"Retro\"\n    ],\n    \"CREDIT\": \"by zoidberg\",\n    \"INPUTS\": [\n        {\n            \"NAME\": \"inputImage\",\n            \"TYPE\": \"image\"\n        },\n        {\n            \"DEFAULT\": 30,\n            \"MAX\": 30,\n            \"MIN\": 2,\n            \"NAME\": \"levels\",\n            \"TYPE\": \"float\"\n        }\n    ],\n    \"ISFVSN\": \"2\"\n}\n*/\n\n\n\nvec3 rgb2hsv(vec3 c)\t{\n\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\t//vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n\t//vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\tvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n\tvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n\n\tfloat d = q.x - min(q.w, q.y);\n\tfloat e = 1.0e-10;\n\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\t{\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvoid main() {\n\t//\tget the src pixel, convert to HSL, posterize the 'L', convert back to RGB\n\n\tvec4\t\tsrcPixel = IMG_THIS_PIXEL(inputImage);\n\tvec4\t\ttmpColor;\n\ttmpColor.xyz = rgb2hsv(srcPixel.rgb);\n\tfloat\t\tamountPerLevel = 1.0/(levels);\n\tfloat\t\tnumOfLevels = floor(tmpColor.z/amountPerLevel);\n\ttmpColor.z = numOfLevels*(1.0/(levels-1.0));\n\tgl_FragColor.rgb = hsv2rgb(tmpColor.xyz);\n\tgl_FragColor.a = srcPixel.a;\n\n}","Inlets":[{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":0,"Hidden":false},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"levels","Exposed":"levels","Value":{"Float":30.0},"Domain":{"Float":{"Min":2.0,"Max":30.0}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":0,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":4,"Metadata":{"ScriptingName":"Gamma Correction","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10584000000,"Height":300.0,"StartOffset":0,"LoopDuration":10584000000,"Pos":[167.16250000000002,-181.39],"Size":[148.15625,37.0],"Loops":false,"Vertex":"","Fragment":"/*{\n\t\"CREDIT\": \"by zoidberg\",\n\t\"ISFVSN\": \"2\",\n\t\"CATEGORIES\": [\n\t\t\"Color Adjustment\", \"Utility\"\n\t],\n\t\"INPUTS\": [\n\t\t{\n\t\t\t\"NAME\": \"inputImage\",\n\t\t\t\"TYPE\": \"image\"\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"gamma\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 1.0,\n\t\t\t\"DEFAULT\": 0.5\n\t\t}\n\t]\n}*/\n\n\n\nvoid main() {\n\t//\tthe input gamma range is 0.0-1.0 (normalized).  the actual gamma range i want to use is 0.0 - 5.0.\n\t//\thowever, actual gamma 0.0-1.0 is just as interesting as actual gamma 1.0-5.0, so we scale the normalized input to match...\n\tfloat\t\trealGamma = (gamma<=0.5) ? (gamma * 2.0) : (((gamma-0.5) * 2.0 * 4.0) + 1.0);\n\tvec4\t\ttmpColorA = IMG_THIS_PIXEL(inputImage);\n\tvec4\t\ttmpColorB;\n\ttmpColorB.rgb = pow(tmpColorA.rgb, vec3(1.0/realGamma));\n\ttmpColorB.a = tmpColorA.a;\n\tgl_FragColor = tmpColorB;\n}\n","Inlets":[{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":0,"Hidden":false},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"gamma","Exposed":"gamma","Value":{"Float":0.7989583611488342},"Domain":{"Float":{"Min":0.0,"Max":1.0}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":0,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":3,"Metadata":{"ScriptingName":"Exposure Adjust","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10584000000,"Height":300.0,"StartOffset":0,"LoopDuration":10584000000,"Pos":[6.100000000000023,-181.39],"Size":[134.59375,37.0],"Loops":false,"Vertex":"","Fragment":"/*{\n\t\"CREDIT\": \"by carter rosenberg\",\n\t\"ISFVSN\": \"2\",\n\t\"CATEGORIES\": [\n\t\t\"Color Adjustment\"\n\t],\n\t\"INPUTS\": [\n\t\t{\n\t\t\t\"NAME\": \"inputImage\",\n\t\t\t\"TYPE\": \"image\"\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"inputEV\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"MIN\": -10.0,\n\t\t\t\"MAX\": 10.0,\n\t\t\t\"DEFAULT\": 0.5\n\t\t}\n\t]\n}*/\n\n\n\nvoid main() {\n\t//\tbased on\n\t//\thttps://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CoreImageFilterReference/Reference/reference.html#//apple_ref/doc/filter/ci/CIExposureAdjust\n\tvec4\t\ttmpColorA = IMG_THIS_PIXEL(inputImage);\n\ttmpColorA.rgb = tmpColorA.rgb * pow(2.0, inputEV);\n\tgl_FragColor = tmpColorA;\n}\n","Inlets":[{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":0,"Hidden":false},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"inputEV","Exposed":"inputev","Value":{"Float":-6.002371788024902},"Domain":{"Float":{"Min":-10.0,"Max":10.0}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":0,"Hidden":false}]},{"uuid":"b9a20181-2925-4ade-925e-a2fd05fcbf9b","ObjectName":"Jit","id":2,"Metadata":{"ScriptingName":"Texgen","Comment":"","Color":"Transparent1","Label":"Texgen","Touched":true},"Duration":10584000000,"Height":300.0,"StartOffset":0,"LoopDuration":10584000000,"Pos":[-133.89999999999998,-181.39],"Size":[100.0,100.0],"Loops":false,"Text":"#include <cmath>\n#include <cstring>\n\n#include <algorithm>\n#include <array>\n#include <cstdint>\n#include <iterator>\n#include <limits.h>\n#include <numeric>\n#include <random>\n#include <type_traits>\n\n#if __has_include(<concepts>) && defined(__cpp_concepts)\n#include <concepts>\n#endif\n\n// Library major version\n#define SIVPERLIN_VERSION_MAJOR 3\n\n// Library minor version\n#define SIVPERLIN_VERSION_MINOR 0\n\n// Library revision version\n#define SIVPERLIN_VERSION_REVISION 0\n\n// Library version\n#define SIVPERLIN_VERSION                                                      \\\n  ((SIVPERLIN_VERSION_MAJOR * 100 * 100) + (SIVPERLIN_VERSION_MINOR * 100) +   \\\n   (SIVPERLIN_VERSION_REVISION))\n\n// [[nodiscard]] for constructors\n#if (201907L <= __has_cpp_attribute(nodiscard))\n#define SIVPERLIN_NODISCARD_CXX20 [[nodiscard]]\n#else\n#define SIVPERLIN_NODISCARD_CXX20\n#endif\n\n// std::uniform_random_bit_generator concept\n#if __cpp_lib_concepts\n#define SIVPERLIN_CONCEPT_URBG template <std::uniform_random_bit_generator URBG>\n#define SIVPERLIN_CONCEPT_URBG_                                                \\\n  template <std::uniform_random_bit_generator URBG>\n#else\n#define SIVPERLIN_CONCEPT_URBG                                                 \\\n  template <class URBG,                                                        \\\n            std::enable_if_t<std::conjunction_v<                               \\\n                std::is_invocable<URBG &>,                                     \\\n                std::is_unsigned<std::invoke_result_t<URBG &>>>> * = nullptr>\n#define SIVPERLIN_CONCEPT_URBG_                                                \\\n  template <class URBG,                                                        \\\n            std::enable_if_t<std::conjunction_v<                               \\\n                std::is_invocable<URBG &>,                                     \\\n                std::is_unsigned<std::invoke_result_t<URBG &>>>> *>\n#endif\n\n// arbitrary value for increasing entropy\n#ifndef SIVPERLIN_DEFAULT_Y\n#define SIVPERLIN_DEFAULT_Y (0.12345)\n#endif\n\n// arbitrary value for increasing entropy\n#ifndef SIVPERLIN_DEFAULT_Z\n#define SIVPERLIN_DEFAULT_Z (0.34567)\n#endif\n\nnamespace siv {\ntemplate <class Float> class BasicPerlinNoise {\npublic:\n  static_assert(std::is_floating_point_v<Float>);\n\n  ///////////////////////////////////////\n  //\n  //\tTypedefs\n  //\n\n  using state_type = std::array<std::uint8_t, 256>;\n\n  using value_type = Float;\n\n  using default_random_engine = std::mt19937;\n\n  using seed_type = typename default_random_engine::result_type;\n\n  ///////////////////////////////////////\n  //\n  //\tConstructors\n  //\n\n  SIVPERLIN_NODISCARD_CXX20\n  constexpr BasicPerlinNoise() noexcept;\n\n  SIVPERLIN_NODISCARD_CXX20\n  explicit BasicPerlinNoise(seed_type seed);\n\n  SIVPERLIN_CONCEPT_URBG\n  SIVPERLIN_NODISCARD_CXX20\n  explicit BasicPerlinNoise(URBG &&urbg);\n\n  ///////////////////////////////////////\n  //\n  //\tReseed\n  //\n\n  void reseed(seed_type seed);\n\n  SIVPERLIN_CONCEPT_URBG\n  void reseed(URBG &&urbg);\n\n  ///////////////////////////////////////\n  //\n  //\tSerialization\n  //\n\n  [[nodiscard]] constexpr const state_type &serialize() const noexcept;\n\n  constexpr void deserialize(const state_type &state) noexcept;\n\n  ///////////////////////////////////////\n  //\n  //\tNoise (The result is in the range [-1, 1])\n  //\n\n  [[nodiscard]] value_type noise1D(value_type x) const noexcept;\n\n  [[nodiscard]] value_type noise2D(value_type x, value_type y) const noexcept;\n\n  [[nodiscard]] value_type noise3D(value_type x, value_type y,\n                                   value_type z) const noexcept;\n\n  ///////////////////////////////////////\n  //\n  //\tNoise (The result is remapped to the range [0, 1])\n  //\n\n  [[nodiscard]] value_type noise1D_01(value_type x) const noexcept;\n\n  [[nodiscard]] value_type noise2D_01(value_type x,\n                                      value_type y) const noexcept;\n\n  [[nodiscard]] value_type noise3D_01(value_type x, value_type y,\n                                      value_type z) const noexcept;\n\n  ///////////////////////////////////////\n  //\n  //\tOctave noise (The result can be out of the range [-1, 1])\n  //\n\n  [[nodiscard]] value_type\n  octave1D(value_type x, std::int32_t octaves,\n           value_type persistence = value_type(0.5)) const noexcept;\n\n  [[nodiscard]] value_type\n  octave2D(value_type x, value_type y, std::int32_t octaves,\n           value_type persistence = value_type(0.5)) const noexcept;\n\n  [[nodiscard]] value_type\n  octave3D(value_type x, value_type y, value_type z, std::int32_t octaves,\n           value_type persistence = value_type(0.5)) const noexcept;\n\n  ///////////////////////////////////////\n  //\n  //\tOctave noise (The result is clamped to the range [-1, 1])\n  //\n\n  [[nodiscard]] value_type\n  octave1D_11(value_type x, std::int32_t octaves,\n              value_type persistence = value_type(0.5)) const noexcept;\n\n  [[nodiscard]] value_type\n  octave2D_11(value_type x, value_type y, std::int32_t octaves,\n              value_type persistence = value_type(0.5)) const noexcept;\n\n  [[nodiscard]] value_type\n  octave3D_11(value_type x, value_type y, value_type z, std::int32_t octaves,\n              value_type persistence = value_type(0.5)) const noexcept;\n\n  ///////////////////////////////////////\n  //\n  //\tOctave noise (The result is clamped and remapped to the range [0, 1])\n  //\n\n  [[nodiscard]] value_type\n  octave1D_01(value_type x, std::int32_t octaves,\n              value_type persistence = value_type(0.5)) const noexcept;\n\n  [[nodiscard]] value_type\n  octave2D_01(value_type x, value_type y, std::int32_t octaves,\n              value_type persistence = value_type(0.5)) const noexcept;\n\n  [[nodiscard]] value_type\n  octave3D_01(value_type x, value_type y, value_type z, std::int32_t octaves,\n              value_type persistence = value_type(0.5)) const noexcept;\n\n  ///////////////////////////////////////\n  //\n  //\tOctave noise (The result is normalized to the range [-1, 1])\n  //\n\n  [[nodiscard]] value_type\n  normalizedOctave1D(value_type x, std::int32_t octaves,\n                     value_type persistence = value_type(0.5)) const noexcept;\n\n  [[nodiscard]] value_type\n  normalizedOctave2D(value_type x, value_type y, std::int32_t octaves,\n                     value_type persistence = value_type(0.5)) const noexcept;\n\n  [[nodiscard]] value_type\n  normalizedOctave3D(value_type x, value_type y, value_type z,\n                     std::int32_t octaves,\n                     value_type persistence = value_type(0.5)) const noexcept;\n\n  ///////////////////////////////////////\n  //\n  //\tOctave noise (The result is normalized and remapped to the range [0, 1])\n  //\n\n  [[nodiscard]] value_type normalizedOctave1D_01(\n      value_type x, std::int32_t octaves,\n      value_type persistence = value_type(0.5)) const noexcept;\n\n  [[nodiscard]] value_type normalizedOctave2D_01(\n      value_type x, value_type y, std::int32_t octaves,\n      value_type persistence = value_type(0.5)) const noexcept;\n\n  [[nodiscard]] value_type normalizedOctave3D_01(\n      value_type x, value_type y, value_type z, std::int32_t octaves,\n      value_type persistence = value_type(0.5)) const noexcept;\n\nprivate:\n  state_type m_permutation;\n};\n\nusing PerlinNoise = BasicPerlinNoise<double>;\n\nnamespace perlin_detail {\n////////////////////////////////////////////////\n//\n//\tThese functions are provided for consistency.\n//\tYou may get different results from std::shuffle() with different\n// standard library implementations.\n//\nSIVPERLIN_CONCEPT_URBG\n[[nodiscard]] inline std::uint64_t Random(const std::uint64_t max,\n                                          URBG &&urbg) {\n  return (urbg() % (max + 1));\n}\n\ntemplate <class RandomIt, class URBG>\ninline void Shuffle(RandomIt first, RandomIt last, URBG &&urbg) {\n  if (first == last) {\n    return;\n  }\n\n  using difference_type =\n      typename std::iterator_traits<RandomIt>::difference_type;\n\n  for (RandomIt it = first + 1; it < last; ++it) {\n    const std::uint64_t n = static_cast<std::uint64_t>(it - first);\n    std::iter_swap(it, first + static_cast<difference_type>(\n                                   Random(n, std::forward<URBG>(urbg))));\n  }\n}\n//\n////////////////////////////////////////////////\n\ntemplate <class Float>\n[[nodiscard]] inline constexpr Float Fade(const Float t) noexcept {\n  return t * t * t * (t * (t * 6 - 15) + 10);\n}\n\ntemplate <class Float>\n[[nodiscard]] inline constexpr Float Lerp(const Float a, const Float b,\n                                          const Float t) noexcept {\n  return (a + (b - a) * t);\n}\n\ntemplate <class Float>\n[[nodiscard]] inline constexpr Float Grad(const std::uint8_t hash,\n                                          const Float x, const Float y,\n                                          const Float z) noexcept {\n  const std::uint8_t h = hash & 15;\n  const Float u = h < 8 ? x : y;\n  const Float v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n  return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n}\n\ntemplate <class Float>\n[[nodiscard]] inline constexpr Float Remap_01(const Float x) noexcept {\n  return (x * Float(0.5) + Float(0.5));\n}\n\ntemplate <class Float>\n[[nodiscard]] inline constexpr Float Clamp_11(const Float x) noexcept {\n  return std::clamp(x, Float(-1.0), Float(1.0));\n}\n\ntemplate <class Float>\n[[nodiscard]] inline constexpr Float RemapClamp_01(const Float x) noexcept {\n  if (x <= Float(-1.0)) {\n    return Float(0.0);\n  } else if (Float(1.0) <= x) {\n    return Float(1.0);\n  }\n\n  return (x * Float(0.5) + Float(0.5));\n}\n\ntemplate <class Noise, class Float>\n[[nodiscard]] inline auto Octave1D(const Noise &noise, Float x,\n                                   const std::int32_t octaves,\n                                   const Float persistence) noexcept {\n  using value_type = Float;\n  value_type result = 0;\n  value_type amplitude = 1;\n\n  for (std::int32_t i = 0; i < octaves; ++i) {\n    result += (noise.noise1D(x) * amplitude);\n    x *= 2;\n    amplitude *= persistence;\n  }\n\n  return result;\n}\n\ntemplate <class Noise, class Float>\n[[nodiscard]] inline auto Octave2D(const Noise &noise, Float x, Float y,\n                                   const std::int32_t octaves,\n                                   const Float persistence) noexcept {\n  using value_type = Float;\n  value_type result = 0;\n  value_type amplitude = 1;\n\n  for (std::int32_t i = 0; i < octaves; ++i) {\n    result += (noise.noise2D(x, y) * amplitude);\n    x *= 2;\n    y *= 2;\n    amplitude *= persistence;\n  }\n\n  return result;\n}\n\ntemplate <class Noise, class Float>\n[[nodiscard]] inline auto Octave3D(const Noise &noise, Float x, Float y,\n                                   Float z, const std::int32_t octaves,\n                                   const Float persistence) noexcept {\n  using value_type = Float;\n  value_type result = 0;\n  value_type amplitude = 1;\n\n  for (std::int32_t i = 0; i < octaves; ++i) {\n    result += (noise.noise3D(x, y, z) * amplitude);\n    x *= 2;\n    y *= 2;\n    z *= 2;\n    amplitude *= persistence;\n  }\n\n  return result;\n}\n\ntemplate <class Float>\n[[nodiscard]] inline constexpr Float\nMaxAmplitude(const std::int32_t octaves, const Float persistence) noexcept {\n  using value_type = Float;\n  value_type result = 0;\n  value_type amplitude = 1;\n\n  for (std::int32_t i = 0; i < octaves; ++i) {\n    result += amplitude;\n    amplitude *= persistence;\n  }\n\n  return result;\n}\n} // namespace perlin_detail\n\n///////////////////////////////////////\n\ntemplate <class Float>\ninline constexpr BasicPerlinNoise<Float>::BasicPerlinNoise() noexcept\n    : m_permutation{\n          151, 160, 137, 91,  90,  15,  131, 13,  201, 95,  96,  53,  194, 233,\n          7,   225, 140, 36,  103, 30,  69,  142, 8,   99,  37,  240, 21,  10,\n          23,  190, 6,   148, 247, 120, 234, 75,  0,   26,  197, 62,  94,  252,\n          219, 203, 117, 35,  11,  32,  57,  177, 33,  88,  237, 149, 56,  87,\n          174, 20,  125, 136, 171, 168, 68,  175, 74,  165, 71,  134, 139, 48,\n          27,  166, 77,  146, 158, 231, 83,  111, 229, 122, 60,  211, 133, 230,\n          220, 105, 92,  41,  55,  46,  245, 40,  244, 102, 143, 54,  65,  25,\n          63,  161, 1,   216, 80,  73,  209, 76,  132, 187, 208, 89,  18,  169,\n          200, 196, 135, 130, 116, 188, 159, 86,  164, 100, 109, 198, 173, 186,\n          3,   64,  52,  217, 226, 250, 124, 123, 5,   202, 38,  147, 118, 126,\n          255, 82,  85,  212, 207, 206, 59,  227, 47,  16,  58,  17,  182, 189,\n          28,  42,  223, 183, 170, 213, 119, 248, 152, 2,   44,  154, 163, 70,\n          221, 153, 101, 155, 167, 43,  172, 9,   129, 22,  39,  253, 19,  98,\n          108, 110, 79,  113, 224, 232, 178, 185, 112, 104, 218, 246, 97,  228,\n          251, 34,  242, 193, 238, 210, 144, 12,  191, 179, 162, 241, 81,  51,\n          145, 235, 249, 14,  239, 107, 49,  192, 214, 31,  181, 199, 106, 157,\n          184, 84,  204, 176, 115, 121, 50,  45,  127, 4,   150, 254, 138, 236,\n          205, 93,  222, 114, 67,  29,  24,  72,  243, 141, 128, 195, 78,  66,\n          215, 61,  156, 180} {}\n\ntemplate <class Float>\ninline BasicPerlinNoise<Float>::BasicPerlinNoise(const seed_type seed) {\n  reseed(seed);\n}\n\ntemplate <class Float>\nSIVPERLIN_CONCEPT_URBG_ inline BasicPerlinNoise<Float>::BasicPerlinNoise(\n    URBG &&urbg) {\n  reseed(std::forward<URBG>(urbg));\n}\n\n///////////////////////////////////////\n\ntemplate <class Float>\ninline void BasicPerlinNoise<Float>::reseed(const seed_type seed) {\n  reseed(default_random_engine{seed});\n}\n\ntemplate <class Float>\nSIVPERLIN_CONCEPT_URBG_ inline void\nBasicPerlinNoise<Float>::reseed(URBG &&urbg) {\n  std::iota(m_permutation.begin(), m_permutation.end(), uint8_t{0});\n\n  perlin_detail::Shuffle(m_permutation.begin(), m_permutation.end(),\n                         std::forward<URBG>(urbg));\n}\n\n///////////////////////////////////////\n\ntemplate <class Float>\ninline constexpr const typename BasicPerlinNoise<Float>::state_type &\nBasicPerlinNoise<Float>::serialize() const noexcept {\n  return m_permutation;\n}\n\ntemplate <class Float>\ninline constexpr void\nBasicPerlinNoise<Float>::deserialize(const state_type &state) noexcept {\n  m_permutation = state;\n}\n\n///////////////////////////////////////\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::noise1D(const value_type x) const noexcept {\n  return noise3D(x, static_cast<value_type>(SIVPERLIN_DEFAULT_Y),\n                 static_cast<value_type>(SIVPERLIN_DEFAULT_Z));\n}\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::noise2D(const value_type x,\n                                 const value_type y) const noexcept {\n  return noise3D(x, y, static_cast<value_type>(SIVPERLIN_DEFAULT_Z));\n}\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::noise3D(const value_type x, const value_type y,\n                                 const value_type z) const noexcept {\n  const value_type _x = std::floor(x);\n  const value_type _y = std::floor(y);\n  const value_type _z = std::floor(z);\n\n  const std::int32_t ix = static_cast<std::int32_t>(_x) & 255;\n  const std::int32_t iy = static_cast<std::int32_t>(_y) & 255;\n  const std::int32_t iz = static_cast<std::int32_t>(_z) & 255;\n\n  const value_type fx = (x - _x);\n  const value_type fy = (y - _y);\n  const value_type fz = (z - _z);\n\n  const value_type u = perlin_detail::Fade(fx);\n  const value_type v = perlin_detail::Fade(fy);\n  const value_type w = perlin_detail::Fade(fz);\n\n  const std::uint8_t A = (m_permutation[ix & 255] + iy) & 255;\n  const std::uint8_t B = (m_permutation[(ix + 1) & 255] + iy) & 255;\n\n  const std::uint8_t AA = (m_permutation[A] + iz) & 255;\n  const std::uint8_t AB = (m_permutation[(A + 1) & 255] + iz) & 255;\n\n  const std::uint8_t BA = (m_permutation[B] + iz) & 255;\n  const std::uint8_t BB = (m_permutation[(B + 1) & 255] + iz) & 255;\n\n  const value_type p0 = perlin_detail::Grad(m_permutation[AA], fx, fy, fz);\n  const value_type p1 = perlin_detail::Grad(m_permutation[BA], fx - 1, fy, fz);\n  const value_type p2 = perlin_detail::Grad(m_permutation[AB], fx, fy - 1, fz);\n  const value_type p3 =\n      perlin_detail::Grad(m_permutation[BB], fx - 1, fy - 1, fz);\n  const value_type p4 =\n      perlin_detail::Grad(m_permutation[(AA + 1) & 255], fx, fy, fz - 1);\n  const value_type p5 =\n      perlin_detail::Grad(m_permutation[(BA + 1) & 255], fx - 1, fy, fz - 1);\n  const value_type p6 =\n      perlin_detail::Grad(m_permutation[(AB + 1) & 255], fx, fy - 1, fz - 1);\n  const value_type p7 = perlin_detail::Grad(m_permutation[(BB + 1) & 255],\n                                            fx - 1, fy - 1, fz - 1);\n\n  const value_type q0 = perlin_detail::Lerp(p0, p1, u);\n  const value_type q1 = perlin_detail::Lerp(p2, p3, u);\n  const value_type q2 = perlin_detail::Lerp(p4, p5, u);\n  const value_type q3 = perlin_detail::Lerp(p6, p7, u);\n\n  const value_type r0 = perlin_detail::Lerp(q0, q1, v);\n  const value_type r1 = perlin_detail::Lerp(q2, q3, v);\n\n  return perlin_detail::Lerp(r0, r1, w);\n}\n\n///////////////////////////////////////\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::noise1D_01(const value_type x) const noexcept {\n  return perlin_detail::Remap_01(noise1D(x));\n}\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::noise2D_01(const value_type x,\n                                    const value_type y) const noexcept {\n  return perlin_detail::Remap_01(noise2D(x, y));\n}\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::noise3D_01(const value_type x, const value_type y,\n                                    const value_type z) const noexcept {\n  return perlin_detail::Remap_01(noise3D(x, y, z));\n}\n\n///////////////////////////////////////\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::octave1D(const value_type x,\n                                  const std::int32_t octaves,\n                                  const value_type persistence) const noexcept {\n  return perlin_detail::Octave1D(*this, x, octaves, persistence);\n}\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::octave2D(const value_type x, const value_type y,\n                                  const std::int32_t octaves,\n                                  const value_type persistence) const noexcept {\n  return perlin_detail::Octave2D(*this, x, y, octaves, persistence);\n}\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::octave3D(const value_type x, const value_type y,\n                                  const value_type z,\n                                  const std::int32_t octaves,\n                                  const value_type persistence) const noexcept {\n  return perlin_detail::Octave3D(*this, x, y, z, octaves, persistence);\n}\n\n///////////////////////////////////////\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::octave1D_11(\n    const value_type x, const std::int32_t octaves,\n    const value_type persistence) const noexcept {\n  return perlin_detail::Clamp_11(octave1D(x, octaves, persistence));\n}\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::octave2D_11(\n    const value_type x, const value_type y, const std::int32_t octaves,\n    const value_type persistence) const noexcept {\n  return perlin_detail::Clamp_11(octave2D(x, y, octaves, persistence));\n}\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::octave3D_11(\n    const value_type x, const value_type y, const value_type z,\n    const std::int32_t octaves, const value_type persistence) const noexcept {\n  return perlin_detail::Clamp_11(octave3D(x, y, z, octaves, persistence));\n}\n\n///////////////////////////////////////\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::octave1D_01(\n    const value_type x, const std::int32_t octaves,\n    const value_type persistence) const noexcept {\n  return perlin_detail::RemapClamp_01(octave1D(x, octaves, persistence));\n}\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::octave2D_01(\n    const value_type x, const value_type y, const std::int32_t octaves,\n    const value_type persistence) const noexcept {\n  return perlin_detail::RemapClamp_01(octave2D(x, y, octaves, persistence));\n}\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::octave3D_01(\n    const value_type x, const value_type y, const value_type z,\n    const std::int32_t octaves, const value_type persistence) const noexcept {\n  return perlin_detail::RemapClamp_01(octave3D(x, y, z, octaves, persistence));\n}\n\n///////////////////////////////////////\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::normalizedOctave1D(\n    const value_type x, const std::int32_t octaves,\n    const value_type persistence) const noexcept {\n  return (octave1D(x, octaves, persistence) /\n          perlin_detail::MaxAmplitude(octaves, persistence));\n}\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::normalizedOctave2D(\n    const value_type x, const value_type y, const std::int32_t octaves,\n    const value_type persistence) const noexcept {\n  return (octave2D(x, y, octaves, persistence) /\n          perlin_detail::MaxAmplitude(octaves, persistence));\n}\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::normalizedOctave3D(\n    const value_type x, const value_type y, const value_type z,\n    const std::int32_t octaves, const value_type persistence) const noexcept {\n  return (octave3D(x, y, z, octaves, persistence) /\n          perlin_detail::MaxAmplitude(octaves, persistence));\n}\n\n///////////////////////////////////////\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::normalizedOctave1D_01(\n    const value_type x, const std::int32_t octaves,\n    const value_type persistence) const noexcept {\n  return perlin_detail::Remap_01(normalizedOctave1D(x, octaves, persistence));\n}\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::normalizedOctave2D_01(\n    const value_type x, const value_type y, const std::int32_t octaves,\n    const value_type persistence) const noexcept {\n  return perlin_detail::Remap_01(\n      normalizedOctave2D(x, y, octaves, persistence));\n}\n\ntemplate <class Float>\ninline typename BasicPerlinNoise<Float>::value_type\nBasicPerlinNoise<Float>::normalizedOctave3D_01(\n    const value_type x, const value_type y, const value_type z,\n    const std::int32_t octaves, const value_type persistence) const noexcept {\n  return perlin_detail::Remap_01(\n      normalizedOctave3D(x, y, z, octaves, persistence));\n}\n} // namespace siv\n\n#undef SIVPERLIN_NODISCARD_CXX20\n#undef SIVPERLIN_CONCEPT_URBG\n#undef SIVPERLIN_CONCEPT_URBG_\n\nconstexpr double frequency = 100.;\nconstexpr std::int32_t octaves = 1;\nconstexpr std::uint32_t seed = 0x46545F;\n\nstatic constexpr int wg = 16;\n#include <thread>\n#include <vector>\n\nvoid fromHSLtoRGB(const float hsl[], float rgb[]) {\n  if (hsl[1] < 0.0001f)\n    rgb[0] = rgb[1] = rgb[2] = hsl[2];\n  else if (hsl[2] < 0.0001f)\n    rgb[0] = rgb[1] = rgb[2] = 0.0f;\n  else {\n    const float q = hsl[2] < 0.5f ? hsl[2] * (1.0f + hsl[1])\n                                  : hsl[2] + hsl[1] - hsl[2] * hsl[1];\n    const float p = 2.0f * hsl[2] - q;\n    float t[] = {hsl[0] + 2.0f, hsl[0], hsl[0] - 2.0f};\n\n    for (int i = 0; i < 3; ++i) {\n      if (t[i] < 0.0f)\n        t[i] += 6.0f;\n      else if (t[i] > 6.0f)\n        t[i] -= 6.0f;\n\n      if (t[i] < 1.0f)\n        rgb[i] = p + (q - p) * t[i];\n      else if (t[i] < 3.0f)\n        rgb[i] = q;\n      else if (t[i] < 4.0f)\n        rgb[i] = p + (q - p) * (4.0f - t[i]);\n      else\n        rgb[i] = p;\n    }\n  }\n}\nconst siv::PerlinNoise perlin{seed};\nextern \"C\" void score_rgba(unsigned char *rgba, int width, int height, int t) {\n  const double fx = (frequency / width);\n  const double fy = (frequency / height);\n\n  std::memset(rgba, 255, width * height * 4);\n  std::vector<std::thread> split;\n\n  for (int c = 0; c < wg; c++) {\n    split.emplace_back([=] {\n      double tk = 0.1 * t;\n      auto wg_size = height / wg;\n      for (int j = c * wg_size; j < (c + 1) * wg_size; j++) {\n        for (int i = 0; i < width; i++) {\n          const auto coord = (j * width + i) * 4;\n\n          const auto c1 = perlin.octave2D_01(i * fx + tk, j * fy - tk, octaves);\n          const auto c2 = perlin.octave2D_01(1e3 + i * fx + 1.5 * tk,\n                                             1e3 + j * fy - 1.5 * tk, octaves);\n          const auto c3 = perlin.octave2D_01(1e6 + i * fx + 2 * tk,\n                                             1e6 + j * fy - 2 * tk, octaves);\n          float hsl[3]{float(c2 * 6), float(0.3), float(0.7)};\n          float rgb[3];\n          fromHSLtoRGB(hsl, rgb);\n\n          rgba[coord + 0] = rgb[0] * 255;\n          rgba[coord + 1] = rgb[1] * 255;\n          rgba[coord + 2] = rgb[2] * 255;\n          rgba[coord + 3] = std::pow(c1, 20) * 1000 + std::pow(c2, 18) * 800 +\n                            std::pow(c3, 18) * 800;\n        }\n      }\n    });\n  }\n\n  for (auto &t : split)\n    t.join();\n}\n","Inlets":[],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":0,"Hidden":false}]}],"SmallViewRack":[{"Processes":[2,3,4,6,7,8,10,12,13,15,17],"Process":null,"Height":200.0,"Nodal":true},{"Processes":[11],"Process":11,"Height":50.0,"Nodal":false}],"FullViewRack":[{"Process":0,"Nodal":true},{"Process":11,"Nodal":false}],"DefaultDuration":10584000000,"MinDuration":10584000000,"MaxDuration":11113200000,"GuiDuration":11642400000,"Speed":1.0,"Rigidity":false,"MinNull":false,"MaxInf":true,"Signatures":[[0,[4,4]]],"StartState":0,"EndState":1,"StartDate":0,"HeightPercentage":0.0,"NodalSlotHeight":416.0,"QuantizationRate":-1.0,"Zoom":15120000.0,"Center":0,"ViewMode":1,"SmallViewShown":true,"HasSignature":true},"StartTimeNode":{"ObjectName":"Scenario::TimeSyncModel","id":0,"Metadata":{"ScriptingName":"Sync.start","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":0,"Events":[0],"MusicalSync":-1.0,"AutoTrigger":false,"Start":true,"Active":false,"Expression":" { true == false } "},"EndTimeNode":{"ObjectName":"Scenario::TimeSyncModel","id":1,"Metadata":{"ScriptingName":"Sync.end","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":10584000000,"Events":[1],"MusicalSync":-1.0,"AutoTrigger":false,"Start":false,"Active":true,"Expression":" { true == false } "},"StartEvent":{"ObjectName":"Scenario::EventModel","id":0,"Metadata":{"ScriptingName":"Event.start","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":0,"States":[0],"Condition":"","Date":0,"Offset":0},"EndEvent":{"ObjectName":"Scenario::EventModel","id":1,"Metadata":{"ScriptingName":"Event.end","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":1,"States":[1],"Condition":"","Date":10584000000,"Offset":0},"StartState":{"ObjectName":"Scenario::StateModel","id":0,"Metadata":{"ScriptingName":"State.start","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":0,"PreviousConstraint":null,"NextConstraint":0,"HeightPercentage":0.0,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},"EndState":{"ObjectName":"Scenario::StateModel","id":1,"Metadata":{"ScriptingName":"State.end","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":1,"PreviousConstraint":0,"NextConstraint":null,"HeightPercentage":0.0,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]}},"Speed":1.0,"Cables":[{"ObjectName":"Process::Cable","id":1,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"Jit","ObjectId":2},{"ObjectName":"Outlet","ObjectId":0}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":3},{"ObjectName":"Inlet","ObjectId":0}]},{"ObjectName":"Process::Cable","id":17,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"Process::ProcessModel","ObjectId":17},{"ObjectName":"Outlet","ObjectId":0}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":7},{"ObjectName":"Inlet","ObjectId":2}]},{"ObjectName":"Process::Cable","id":16,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"Process::ProcessModel","ObjectId":17},{"ObjectName":"Outlet","ObjectId":0}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":10},{"ObjectName":"Inlet","ObjectId":1}]},{"ObjectName":"Process::Cable","id":14,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"Process::ProcessModel","ObjectId":13},{"ObjectName":"Outlet","ObjectId":0}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"Process::ProcessModel","ObjectId":17},{"ObjectName":"Inlet","ObjectId":0}]},{"ObjectName":"Process::Cable","id":10,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"JSFX","ObjectId":15},{"ObjectName":"Outlet","ObjectId":2}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"Process::ProcessModel","ObjectId":13},{"ObjectName":"Inlet","ObjectId":0}]},{"ObjectName":"Process::Cable","id":9,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"JSFX","ObjectId":12},{"ObjectName":"Outlet","ObjectId":2}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"JSFX","ObjectId":15},{"ObjectName":"Inlet","ObjectId":0}]},{"ObjectName":"Process::Cable","id":7,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"Sound","ObjectId":11},{"ObjectName":"Outlet","ObjectId":0}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"JSFX","ObjectId":12},{"ObjectName":"Inlet","ObjectId":0}]},{"ObjectName":"Process::Cable","id":6,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":8},{"ObjectName":"Outlet","ObjectId":0}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":10},{"ObjectName":"Inlet","ObjectId":0}]},{"ObjectName":"Process::Cable","id":5,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":7},{"ObjectName":"Outlet","ObjectId":0}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":8},{"ObjectName":"Inlet","ObjectId":0}]},{"ObjectName":"Process::Cable","id":4,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":6},{"ObjectName":"Outlet","ObjectId":0}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":7},{"ObjectName":"Inlet","ObjectId":0}]},{"ObjectName":"Process::Cable","id":3,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":4},{"ObjectName":"Outlet","ObjectId":0}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":6},{"ObjectName":"Inlet","ObjectId":0}]},{"ObjectName":"Process::Cable","id":2,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":3},{"ObjectName":"Outlet","ObjectId":0}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":4},{"ObjectName":"Inlet","ObjectId":0}]}],"BusIntervals":[]},"Plugins":[{"uuid":"1f923578-08c3-49be-9ba9-69c144ee2e32","Refresh":false,"Reconnect":false,"MidiRatio":1.0},{"uuid":"6e610e1f-9de2-4c36-90dd-0ef570002a21","RootNode":{},"Children":[{"Device":{"Name":"window","Protocol":"5a181207-7d40-4ad8-814e-879fcdf8cc31"},"Children":[{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":100}},"Name":"screen"}},{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Vec2f":[0.0,0.0]},"Domain":{},"Name":"position"}},{"Address":{"ClipMode":"Free","RepetitionFilter":false,"Value":{},"Domain":{},"Name":"cursor"},"Children":[{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Vec2f":[0.0,0.0]},"Domain":{"Float":{"Min":0.0,"Max":1.0}},"Name":"scaled"}},{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Vec2f":[0.0,0.0]},"Domain":{"Vec2f":{"Min":[0.0,0.0],"Max":[1280.0,270.0],"Values":[[],[]]}},"Name":"absolute"}}]},{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Vec2f":[1280.0,720.0]},"Domain":{},"Name":"size"}},{"Address":{"ClipMode":"Free","RepetitionFilter":false,"Value":{},"Domain":{},"Name":"key"},"Children":[{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Int":0},"Domain":{},"Name":"code"}},{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"String":""},"Domain":{},"Name":"text"}}]},{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Bool":false},"Domain":{},"Name":"fullscreen"}}]}]}],"Version":4,"Commit":"67e774e48912b619a395648ba0c844eb4681f1d2","Tag":"3.0.0-rc7"}