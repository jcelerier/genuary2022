{"Document":{"ObjectName":"Scenario::ScenarioDocumentModel","id":1,"BaseScenario":{"ObjectName":"Scenario::BaseScenario","id":0,"Constraint":{"ObjectName":"Scenario::IntervalModel","id":0,"Metadata":{"ScriptingName":"12-bug","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[{"uuid":"de035912-5b03-49a8-bc4d-b2cba68e21d9","ObjectName":"Scenario","id":1,"Metadata":{"ScriptingName":"Scenario.1","Comment":"","Color":"Transparent1","Label":"","Touched":false},"Duration":10584000000,"Height":1500.0,"StartOffset":0,"LoopDuration":10584000000,"Pos":[40.0,39.0],"Size":[200.0,100.0],"Loops":false,"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"In","Exposed":"in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Out","Exposed":"out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"StartTimeNodeId":0,"StartEventId":0,"StartStateId":0,"TimeNodes":[{"ObjectName":"Scenario::TimeSyncModel","id":20,"Metadata":{"ScriptingName":"Sync.eddy88.9","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":10101948812,"Events":[20],"MusicalSync":-1.0,"AutoTrigger":false,"Start":false,"Active":true,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":19,"Metadata":{"ScriptingName":"Sync.eddy88.8","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":9396348812,"Events":[19],"MusicalSync":-1.0,"AutoTrigger":false,"Start":false,"Active":true,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":18,"Metadata":{"ScriptingName":"Sync.eddy88.7","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":8690748812,"Events":[18],"MusicalSync":-1.0,"AutoTrigger":false,"Start":false,"Active":true,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":17,"Metadata":{"ScriptingName":"Sync.start.9","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":1987548812,"Events":[17],"MusicalSync":-1.0,"AutoTrigger":false,"Start":true,"Active":false,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":16,"Metadata":{"ScriptingName":"Sync.eddy88.6","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":7985148812,"Events":[16],"MusicalSync":-1.0,"AutoTrigger":false,"Start":false,"Active":true,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":15,"Metadata":{"ScriptingName":"Sync.start.8","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":1281948812,"Events":[15],"MusicalSync":-1.0,"AutoTrigger":false,"Start":true,"Active":false,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":14,"Metadata":{"ScriptingName":"Sync.eddy88.5","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":7632348812,"Events":[14],"MusicalSync":-1.0,"AutoTrigger":false,"Start":false,"Active":true,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":13,"Metadata":{"ScriptingName":"Sync.start.7","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":929148812,"Events":[13],"MusicalSync":-1.0,"AutoTrigger":false,"Start":true,"Active":false,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":12,"Metadata":{"ScriptingName":"Sync.start.6","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":3398748812,"Events":[12],"MusicalSync":-1.0,"AutoTrigger":false,"Start":true,"Active":false,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":11,"Metadata":{"ScriptingName":"Sync.start.5","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":2693148812,"Events":[11],"MusicalSync":-1.0,"AutoTrigger":false,"Start":true,"Active":false,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":10,"Metadata":{"ScriptingName":"Sync.eddy88.4","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":9172800000,"Events":[10],"MusicalSync":-1.0,"AutoTrigger":false,"Start":false,"Active":true,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":9,"Metadata":{"ScriptingName":"Sync.start.4","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":2469600000,"Events":[9],"MusicalSync":-1.0,"AutoTrigger":false,"Start":true,"Active":false,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":8,"Metadata":{"ScriptingName":"Sync.eddy88.3","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":8467200000,"Events":[8],"MusicalSync":-1.0,"AutoTrigger":false,"Start":false,"Active":true,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":7,"Metadata":{"ScriptingName":"Sync.start.3","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":1764000000,"Events":[7],"MusicalSync":-1.0,"AutoTrigger":false,"Start":true,"Active":false,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":6,"Metadata":{"ScriptingName":"Sync.eddy88.2","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":7761600000,"Events":[6],"MusicalSync":-1.0,"AutoTrigger":false,"Start":false,"Active":true,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":5,"Metadata":{"ScriptingName":"Sync.start.2","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":1058400000,"Events":[5],"MusicalSync":-1.0,"AutoTrigger":false,"Start":true,"Active":false,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":4,"Metadata":{"ScriptingName":"Sync.eddy88.1","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":7056000000,"Events":[4],"MusicalSync":-1.0,"AutoTrigger":false,"Start":false,"Active":true,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":3,"Metadata":{"ScriptingName":"Sync.start.1","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":352800000,"Events":[3],"MusicalSync":-1.0,"AutoTrigger":false,"Start":true,"Active":false,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":1,"Metadata":{"ScriptingName":"Sync.eddy88","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":6703200000,"Events":[1],"MusicalSync":-1.0,"AutoTrigger":false,"Start":false,"Active":true,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":0,"Metadata":{"ScriptingName":"Sync.start","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":0,"Events":[0],"MusicalSync":-1.0,"AutoTrigger":false,"Start":true,"Active":false,"Expression":" { true == false } "}],"Events":[{"ObjectName":"Scenario::EventModel","id":20,"Metadata":{"ScriptingName":"Event.edit45.9","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":20,"States":[27],"Condition":"","Date":10101948812,"Offset":0},{"ObjectName":"Scenario::EventModel","id":19,"Metadata":{"ScriptingName":"Event.edit45.8","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":19,"States":[25],"Condition":"","Date":9396348812,"Offset":0},{"ObjectName":"Scenario::EventModel","id":18,"Metadata":{"ScriptingName":"Event.edit45.7","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":18,"States":[24],"Condition":"","Date":8690748812,"Offset":0},{"ObjectName":"Scenario::EventModel","id":17,"Metadata":{"ScriptingName":"Event.start.9","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":17,"States":[23,26],"Condition":"","Date":1987548812,"Offset":0},{"ObjectName":"Scenario::EventModel","id":16,"Metadata":{"ScriptingName":"Event.edit45.6","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":16,"States":[22],"Condition":"","Date":7985148812,"Offset":0},{"ObjectName":"Scenario::EventModel","id":15,"Metadata":{"ScriptingName":"Event.start.8","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":15,"States":[21],"Condition":"","Date":1281948812,"Offset":0},{"ObjectName":"Scenario::EventModel","id":14,"Metadata":{"ScriptingName":"Event.edit45.5","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":14,"States":[20],"Condition":"","Date":7632348812,"Offset":0},{"ObjectName":"Scenario::EventModel","id":13,"Metadata":{"ScriptingName":"Event.start.7","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":13,"States":[19,28],"Condition":"","Date":929148812,"Offset":0},{"ObjectName":"Scenario::EventModel","id":12,"Metadata":{"ScriptingName":"Event.start.6","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":12,"States":[18],"Condition":"","Date":3398748812,"Offset":0},{"ObjectName":"Scenario::EventModel","id":11,"Metadata":{"ScriptingName":"Event.start.5","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":11,"States":[17],"Condition":"","Date":2693148812,"Offset":0},{"ObjectName":"Scenario::EventModel","id":10,"Metadata":{"ScriptingName":"Event.edit45.4","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":10,"States":[15],"Condition":"","Date":9172800000,"Offset":0},{"ObjectName":"Scenario::EventModel","id":9,"Metadata":{"ScriptingName":"Event.start.4","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":9,"States":[14],"Condition":"","Date":2469600000,"Offset":0},{"ObjectName":"Scenario::EventModel","id":8,"Metadata":{"ScriptingName":"Event.edit45.3","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":8,"States":[12],"Condition":"","Date":8467200000,"Offset":0},{"ObjectName":"Scenario::EventModel","id":7,"Metadata":{"ScriptingName":"Event.start.3","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":7,"States":[11],"Condition":"","Date":1764000000,"Offset":0},{"ObjectName":"Scenario::EventModel","id":6,"Metadata":{"ScriptingName":"Event.edit45.2","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":6,"States":[9],"Condition":"","Date":7761600000,"Offset":0},{"ObjectName":"Scenario::EventModel","id":5,"Metadata":{"ScriptingName":"Event.start.2","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":5,"States":[8,13],"Condition":"","Date":1058400000,"Offset":0},{"ObjectName":"Scenario::EventModel","id":4,"Metadata":{"ScriptingName":"Event.edit45.1","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":4,"States":[6],"Condition":"","Date":7056000000,"Offset":0},{"ObjectName":"Scenario::EventModel","id":3,"Metadata":{"ScriptingName":"Event.start.1","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":3,"States":[5],"Condition":"","Date":352800000,"Offset":0},{"ObjectName":"Scenario::EventModel","id":1,"Metadata":{"ScriptingName":"Event.edit45","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":1,"States":[2],"Condition":"","Date":6703200000,"Offset":0},{"ObjectName":"Scenario::EventModel","id":0,"Metadata":{"ScriptingName":"Event.start","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":0,"States":[0,1,7,10,16],"Condition":"","Date":0,"Offset":0}],"States":[{"ObjectName":"Scenario::StateModel","id":28,"Metadata":{"ScriptingName":"State.whet43.1","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":13,"PreviousConstraint":null,"NextConstraint":17,"HeightPercentage":0.7713333333333333,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":27,"Metadata":{"ScriptingName":"State.pubs19.9","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":20,"PreviousConstraint":16,"NextConstraint":null,"HeightPercentage":0.7713333333333333,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":26,"Metadata":{"ScriptingName":"State.hill55.1","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":17,"PreviousConstraint":null,"NextConstraint":15,"HeightPercentage":0.6779999999999999,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":25,"Metadata":{"ScriptingName":"State.pubs19.8","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":19,"PreviousConstraint":14,"NextConstraint":null,"HeightPercentage":0.6779999999999999,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":24,"Metadata":{"ScriptingName":"State.pubs19.7","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":18,"PreviousConstraint":13,"NextConstraint":null,"HeightPercentage":0.5926666666666669,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":23,"Metadata":{"ScriptingName":"State.aged23.9","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":17,"PreviousConstraint":null,"NextConstraint":13,"HeightPercentage":0.5926666666666669,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":22,"Metadata":{"ScriptingName":"State.pubs19.6","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":16,"PreviousConstraint":12,"NextConstraint":null,"HeightPercentage":0.5326666666666666,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":21,"Metadata":{"ScriptingName":"State.aged23.8","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":15,"PreviousConstraint":null,"NextConstraint":12,"HeightPercentage":0.5326666666666666,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":20,"Metadata":{"ScriptingName":"State.pubs19.5","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":14,"PreviousConstraint":11,"NextConstraint":null,"HeightPercentage":0.462,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":19,"Metadata":{"ScriptingName":"State.aged23.7","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":13,"PreviousConstraint":null,"NextConstraint":11,"HeightPercentage":0.462,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":18,"Metadata":{"ScriptingName":"State.aged23.6","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":12,"PreviousConstraint":17,"NextConstraint":16,"HeightPercentage":0.7713333333333333,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":17,"Metadata":{"ScriptingName":"State.aged23.5","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":11,"PreviousConstraint":15,"NextConstraint":14,"HeightPercentage":0.6779999999999999,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":16,"Metadata":{"ScriptingName":"State.whet43","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":0,"PreviousConstraint":null,"NextConstraint":10,"HeightPercentage":0.3753333333333333,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":15,"Metadata":{"ScriptingName":"State.pubs19.4","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":10,"PreviousConstraint":9,"NextConstraint":null,"HeightPercentage":0.3753333333333333,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":14,"Metadata":{"ScriptingName":"State.aged23.4","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":9,"PreviousConstraint":10,"NextConstraint":9,"HeightPercentage":0.3753333333333333,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":13,"Metadata":{"ScriptingName":"State.hill55","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":5,"PreviousConstraint":null,"NextConstraint":8,"HeightPercentage":0.282,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":12,"Metadata":{"ScriptingName":"State.pubs19.3","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":8,"PreviousConstraint":7,"NextConstraint":null,"HeightPercentage":0.282,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":11,"Metadata":{"ScriptingName":"State.aged23.3","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":7,"PreviousConstraint":8,"NextConstraint":7,"HeightPercentage":0.282,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":10,"Metadata":{"ScriptingName":"State.plea83","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":0,"PreviousConstraint":null,"NextConstraint":6,"HeightPercentage":0.19666666666666685,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":9,"Metadata":{"ScriptingName":"State.pubs19.2","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":6,"PreviousConstraint":5,"NextConstraint":null,"HeightPercentage":0.19666666666666685,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":8,"Metadata":{"ScriptingName":"State.aged23.2","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":5,"PreviousConstraint":6,"NextConstraint":5,"HeightPercentage":0.19666666666666685,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":7,"Metadata":{"ScriptingName":"State.ores11","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":0,"PreviousConstraint":null,"NextConstraint":4,"HeightPercentage":0.13666666666666666,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":6,"Metadata":{"ScriptingName":"State.pubs19.1","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":4,"PreviousConstraint":3,"NextConstraint":null,"HeightPercentage":0.13666666666666666,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":5,"Metadata":{"ScriptingName":"State.aged23.1","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":3,"PreviousConstraint":4,"NextConstraint":3,"HeightPercentage":0.13666666666666666,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":2,"Metadata":{"ScriptingName":"State.pubs19","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":1,"PreviousConstraint":1,"NextConstraint":null,"HeightPercentage":0.066,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":1,"Metadata":{"ScriptingName":"State.aged23","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":0,"PreviousConstraint":null,"NextConstraint":1,"HeightPercentage":0.066,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":0,"Metadata":{"ScriptingName":"State.start","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":0,"PreviousConstraint":null,"NextConstraint":null,"HeightPercentage":0.02,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]}],"Constraints":[{"ObjectName":"Scenario::IntervalModel","id":17,"Metadata":{"ScriptingName":"Interval.java29.1","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[],"SmallViewRack":[],"FullViewRack":[],"DefaultDuration":2469600000,"MinDuration":2469600000,"MaxDuration":2469600000,"GuiDuration":3492720000,"Speed":1.0,"Rigidity":true,"MinNull":false,"MaxInf":false,"Signatures":[],"StartState":28,"EndState":18,"StartDate":929148812,"HeightPercentage":0.7713333333333333,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":-1.0,"Center":0,"ViewMode":0,"SmallViewShown":false,"HasSignature":false},{"ObjectName":"Scenario::IntervalModel","id":16,"Metadata":{"ScriptingName":"Interval.sham67.9","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":1,"Metadata":{"ScriptingName":"Sq","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[40.0,40.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":2,"Metadata":{"ScriptingName":"Sq.1","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[60.0,60.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":3,"Metadata":{"ScriptingName":"Sq.2","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[50.0,50.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":4,"Metadata":{"ScriptingName":"Sq.3","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[80.0,80.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":5,"Metadata":{"ScriptingName":"Sq.4","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[70.0,70.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":6,"Metadata":{"ScriptingName":"Sq.5","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[100.0,100.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":7,"Metadata":{"ScriptingName":"Sq.6","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[90.0,90.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":8,"Metadata":{"ScriptingName":"Sq.7","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[120.0,120.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":9,"Metadata":{"ScriptingName":"Sq.8","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[110.0,110.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":10,"Metadata":{"ScriptingName":"Sq.9","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[140.0,140.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":11,"Metadata":{"ScriptingName":"Sq.10","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[130.0,130.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":12,"Metadata":{"ScriptingName":"Sq.11","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[160.0,160.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":13,"Metadata":{"ScriptingName":"Sq.12","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[150.0,150.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":14,"Metadata":{"ScriptingName":"Sq.13","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[180.0,180.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":15,"Metadata":{"ScriptingName":"Sq.14","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[170.0,170.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":16,"Metadata":{"ScriptingName":"Sq.15","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[200.0,200.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":17,"Metadata":{"ScriptingName":"Sq.16","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[190.0,190.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":18,"Metadata":{"ScriptingName":"Sq.17","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[220.0,220.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":19,"Metadata":{"ScriptingName":"Sq.18","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[210.0,210.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":20,"Metadata":{"ScriptingName":"Sq.19","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[240.0,240.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":21,"Metadata":{"ScriptingName":"Sq.20","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[230.0,230.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":22,"Metadata":{"ScriptingName":"Sq.21","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[260.0,260.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":23,"Metadata":{"ScriptingName":"Sq.22","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[250.0,250.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":24,"Metadata":{"ScriptingName":"Sq.23","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[280.0,280.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":25,"Metadata":{"ScriptingName":"Sq.24","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[270.0,270.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":26,"Metadata":{"ScriptingName":"Sq.25","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[300.0,300.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":27,"Metadata":{"ScriptingName":"Sq.26","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[290.0,290.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":28,"Metadata":{"ScriptingName":"Sq.27","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[320.0,320.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":29,"Metadata":{"ScriptingName":"Sq.28","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[310.0,310.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":30,"Metadata":{"ScriptingName":"Sq.29","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[340.0,340.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":31,"Metadata":{"ScriptingName":"Sq.30","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[330.0,330.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":32,"Metadata":{"ScriptingName":"Sq.31","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[360.0,360.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":33,"Metadata":{"ScriptingName":"Sq.32","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[350.0,350.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":34,"Metadata":{"ScriptingName":"Sq.33","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[380.0,380.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":35,"Metadata":{"ScriptingName":"Sq.34","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[370.0,370.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":36,"Metadata":{"ScriptingName":"Sq.35","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[400.0,400.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":37,"Metadata":{"ScriptingName":"Sq.36","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[390.0,390.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":38,"Metadata":{"ScriptingName":"Sq.37","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[420.0,420.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":39,"Metadata":{"ScriptingName":"Sq.38","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[410.0,410.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":40,"Metadata":{"ScriptingName":"Sq.39","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[440.0,440.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":41,"Metadata":{"ScriptingName":"Sq.40","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[430.0,430.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":42,"Metadata":{"ScriptingName":"Sq.41","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[460.0,460.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":43,"Metadata":{"ScriptingName":"Sq.42","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[450.0,450.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":44,"Metadata":{"ScriptingName":"Sq.43","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[480.0,480.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":45,"Metadata":{"ScriptingName":"Sq.44","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[470.0,470.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":46,"Metadata":{"ScriptingName":"Sq.45","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[500.0,500.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":47,"Metadata":{"ScriptingName":"Sq.46","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[490.0,490.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":48,"Metadata":{"ScriptingName":"Sq.47","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[520.0,520.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":49,"Metadata":{"ScriptingName":"Sq.48","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[510.0,510.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":50,"Metadata":{"ScriptingName":"Sq.49","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[540.0,540.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]}],"SmallViewRack":[{"Processes":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"Process":null,"Height":413.0,"Nodal":true}],"FullViewRack":[{"Process":0,"Nodal":true}],"DefaultDuration":6703200000,"MinDuration":6703200000,"MaxDuration":4611686018427387903,"GuiDuration":7373520000,"Speed":1.0,"Rigidity":false,"MinNull":true,"MaxInf":true,"Signatures":[],"StartState":18,"EndState":27,"StartDate":3398748812,"HeightPercentage":0.7713333333333333,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":-1.0,"Center":0,"ViewMode":0,"SmallViewShown":false,"HasSignature":false},{"ObjectName":"Scenario::IntervalModel","id":15,"Metadata":{"ScriptingName":"Interval.ride46.1","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[],"SmallViewRack":[],"FullViewRack":[],"DefaultDuration":705600000,"MinDuration":705600000,"MaxDuration":705600000,"GuiDuration":776160000,"Speed":1.0,"Rigidity":true,"MinNull":false,"MaxInf":false,"Signatures":[],"StartState":26,"EndState":17,"StartDate":1987548812,"HeightPercentage":0.6779999999999999,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":-1.0,"Center":0,"ViewMode":0,"SmallViewShown":false,"HasSignature":false},{"ObjectName":"Scenario::IntervalModel","id":14,"Metadata":{"ScriptingName":"Interval.sham67.8","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":1,"Metadata":{"ScriptingName":"Sq","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[40.0,40.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":2,"Metadata":{"ScriptingName":"Sq.1","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[60.0,60.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":3,"Metadata":{"ScriptingName":"Sq.2","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[50.0,50.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":4,"Metadata":{"ScriptingName":"Sq.3","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[80.0,80.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":5,"Metadata":{"ScriptingName":"Sq.4","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[70.0,70.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":6,"Metadata":{"ScriptingName":"Sq.5","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[100.0,100.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":7,"Metadata":{"ScriptingName":"Sq.6","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[90.0,90.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":8,"Metadata":{"ScriptingName":"Sq.7","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[120.0,120.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":9,"Metadata":{"ScriptingName":"Sq.8","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[110.0,110.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":10,"Metadata":{"ScriptingName":"Sq.9","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[140.0,140.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":11,"Metadata":{"ScriptingName":"Sq.10","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[130.0,130.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":12,"Metadata":{"ScriptingName":"Sq.11","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[160.0,160.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":13,"Metadata":{"ScriptingName":"Sq.12","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[150.0,150.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":14,"Metadata":{"ScriptingName":"Sq.13","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[180.0,180.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":15,"Metadata":{"ScriptingName":"Sq.14","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[170.0,170.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":16,"Metadata":{"ScriptingName":"Sq.15","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[200.0,200.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":17,"Metadata":{"ScriptingName":"Sq.16","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[190.0,190.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":18,"Metadata":{"ScriptingName":"Sq.17","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[220.0,220.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":19,"Metadata":{"ScriptingName":"Sq.18","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[210.0,210.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":20,"Metadata":{"ScriptingName":"Sq.19","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[240.0,240.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":21,"Metadata":{"ScriptingName":"Sq.20","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[230.0,230.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":22,"Metadata":{"ScriptingName":"Sq.21","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[260.0,260.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":23,"Metadata":{"ScriptingName":"Sq.22","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[250.0,250.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":24,"Metadata":{"ScriptingName":"Sq.23","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[280.0,280.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":25,"Metadata":{"ScriptingName":"Sq.24","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[270.0,270.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":26,"Metadata":{"ScriptingName":"Sq.25","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[300.0,300.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":27,"Metadata":{"ScriptingName":"Sq.26","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[290.0,290.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":28,"Metadata":{"ScriptingName":"Sq.27","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[320.0,320.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":29,"Metadata":{"ScriptingName":"Sq.28","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[310.0,310.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":30,"Metadata":{"ScriptingName":"Sq.29","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[340.0,340.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":31,"Metadata":{"ScriptingName":"Sq.30","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[330.0,330.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":32,"Metadata":{"ScriptingName":"Sq.31","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[360.0,360.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":33,"Metadata":{"ScriptingName":"Sq.32","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[350.0,350.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":34,"Metadata":{"ScriptingName":"Sq.33","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[380.0,380.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":35,"Metadata":{"ScriptingName":"Sq.34","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[370.0,370.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":36,"Metadata":{"ScriptingName":"Sq.35","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[400.0,400.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":37,"Metadata":{"ScriptingName":"Sq.36","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[390.0,390.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":38,"Metadata":{"ScriptingName":"Sq.37","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[420.0,420.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":39,"Metadata":{"ScriptingName":"Sq.38","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[410.0,410.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":40,"Metadata":{"ScriptingName":"Sq.39","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[440.0,440.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":41,"Metadata":{"ScriptingName":"Sq.40","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[430.0,430.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":42,"Metadata":{"ScriptingName":"Sq.41","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[460.0,460.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":43,"Metadata":{"ScriptingName":"Sq.42","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[450.0,450.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":44,"Metadata":{"ScriptingName":"Sq.43","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[480.0,480.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":45,"Metadata":{"ScriptingName":"Sq.44","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[470.0,470.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":46,"Metadata":{"ScriptingName":"Sq.45","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[500.0,500.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":47,"Metadata":{"ScriptingName":"Sq.46","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[490.0,490.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":48,"Metadata":{"ScriptingName":"Sq.47","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[520.0,520.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":49,"Metadata":{"ScriptingName":"Sq.48","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[510.0,510.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":50,"Metadata":{"ScriptingName":"Sq.49","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[540.0,540.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]}],"SmallViewRack":[{"Processes":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"Process":null,"Height":413.0,"Nodal":true}],"FullViewRack":[{"Process":0,"Nodal":true}],"DefaultDuration":6703200000,"MinDuration":6703200000,"MaxDuration":4611686018427387903,"GuiDuration":7373520000,"Speed":1.0,"Rigidity":false,"MinNull":true,"MaxInf":true,"Signatures":[],"StartState":17,"EndState":25,"StartDate":2693148812,"HeightPercentage":0.6779999999999999,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":-1.0,"Center":0,"ViewMode":0,"SmallViewShown":false,"HasSignature":false},{"ObjectName":"Scenario::IntervalModel","id":13,"Metadata":{"ScriptingName":"Interval.sham67.7","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":1,"Metadata":{"ScriptingName":"Sq","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[40.0,40.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":2,"Metadata":{"ScriptingName":"Sq.1","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[60.0,60.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":3,"Metadata":{"ScriptingName":"Sq.2","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[50.0,50.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":4,"Metadata":{"ScriptingName":"Sq.3","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[80.0,80.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":5,"Metadata":{"ScriptingName":"Sq.4","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[70.0,70.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":6,"Metadata":{"ScriptingName":"Sq.5","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[100.0,100.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":7,"Metadata":{"ScriptingName":"Sq.6","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[90.0,90.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":8,"Metadata":{"ScriptingName":"Sq.7","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[120.0,120.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":9,"Metadata":{"ScriptingName":"Sq.8","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[110.0,110.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":10,"Metadata":{"ScriptingName":"Sq.9","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[140.0,140.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":11,"Metadata":{"ScriptingName":"Sq.10","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[130.0,130.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":12,"Metadata":{"ScriptingName":"Sq.11","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[160.0,160.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":13,"Metadata":{"ScriptingName":"Sq.12","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[150.0,150.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":14,"Metadata":{"ScriptingName":"Sq.13","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[180.0,180.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":15,"Metadata":{"ScriptingName":"Sq.14","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[170.0,170.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":16,"Metadata":{"ScriptingName":"Sq.15","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[200.0,200.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":17,"Metadata":{"ScriptingName":"Sq.16","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[190.0,190.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":18,"Metadata":{"ScriptingName":"Sq.17","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[220.0,220.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":19,"Metadata":{"ScriptingName":"Sq.18","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[210.0,210.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":20,"Metadata":{"ScriptingName":"Sq.19","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[240.0,240.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":21,"Metadata":{"ScriptingName":"Sq.20","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[230.0,230.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":22,"Metadata":{"ScriptingName":"Sq.21","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[260.0,260.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":23,"Metadata":{"ScriptingName":"Sq.22","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[250.0,250.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":24,"Metadata":{"ScriptingName":"Sq.23","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[280.0,280.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":25,"Metadata":{"ScriptingName":"Sq.24","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[270.0,270.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":26,"Metadata":{"ScriptingName":"Sq.25","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[300.0,300.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":27,"Metadata":{"ScriptingName":"Sq.26","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[290.0,290.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":28,"Metadata":{"ScriptingName":"Sq.27","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[320.0,320.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":29,"Metadata":{"ScriptingName":"Sq.28","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[310.0,310.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":30,"Metadata":{"ScriptingName":"Sq.29","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[340.0,340.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":31,"Metadata":{"ScriptingName":"Sq.30","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[330.0,330.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":32,"Metadata":{"ScriptingName":"Sq.31","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[360.0,360.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":33,"Metadata":{"ScriptingName":"Sq.32","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[350.0,350.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":34,"Metadata":{"ScriptingName":"Sq.33","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[380.0,380.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":35,"Metadata":{"ScriptingName":"Sq.34","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[370.0,370.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":36,"Metadata":{"ScriptingName":"Sq.35","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[400.0,400.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":37,"Metadata":{"ScriptingName":"Sq.36","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[390.0,390.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":38,"Metadata":{"ScriptingName":"Sq.37","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[420.0,420.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":39,"Metadata":{"ScriptingName":"Sq.38","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[410.0,410.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":40,"Metadata":{"ScriptingName":"Sq.39","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[440.0,440.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":41,"Metadata":{"ScriptingName":"Sq.40","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[430.0,430.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":42,"Metadata":{"ScriptingName":"Sq.41","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[460.0,460.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":43,"Metadata":{"ScriptingName":"Sq.42","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[450.0,450.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":44,"Metadata":{"ScriptingName":"Sq.43","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[480.0,480.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":45,"Metadata":{"ScriptingName":"Sq.44","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[470.0,470.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":46,"Metadata":{"ScriptingName":"Sq.45","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[500.0,500.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":47,"Metadata":{"ScriptingName":"Sq.46","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[490.0,490.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":48,"Metadata":{"ScriptingName":"Sq.47","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[520.0,520.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":49,"Metadata":{"ScriptingName":"Sq.48","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[510.0,510.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":50,"Metadata":{"ScriptingName":"Sq.49","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[540.0,540.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]}],"SmallViewRack":[{"Processes":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"Process":null,"Height":413.0,"Nodal":true}],"FullViewRack":[{"Process":0,"Nodal":true}],"DefaultDuration":6703200000,"MinDuration":6703200000,"MaxDuration":4611686018427387903,"GuiDuration":7373520000,"Speed":1.0,"Rigidity":false,"MinNull":true,"MaxInf":true,"Signatures":[],"StartState":23,"EndState":24,"StartDate":1987548812,"HeightPercentage":0.5926666666666669,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":-1.0,"Center":0,"ViewMode":0,"SmallViewShown":false,"HasSignature":false},{"ObjectName":"Scenario::IntervalModel","id":12,"Metadata":{"ScriptingName":"Interval.sham67.6","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":1,"Metadata":{"ScriptingName":"Sq","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[40.0,40.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":2,"Metadata":{"ScriptingName":"Sq.1","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[60.0,60.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":3,"Metadata":{"ScriptingName":"Sq.2","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[50.0,50.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":4,"Metadata":{"ScriptingName":"Sq.3","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[80.0,80.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":5,"Metadata":{"ScriptingName":"Sq.4","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[70.0,70.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":6,"Metadata":{"ScriptingName":"Sq.5","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[100.0,100.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":7,"Metadata":{"ScriptingName":"Sq.6","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[90.0,90.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":8,"Metadata":{"ScriptingName":"Sq.7","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[120.0,120.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":9,"Metadata":{"ScriptingName":"Sq.8","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[110.0,110.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":10,"Metadata":{"ScriptingName":"Sq.9","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[140.0,140.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":11,"Metadata":{"ScriptingName":"Sq.10","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[130.0,130.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":12,"Metadata":{"ScriptingName":"Sq.11","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[160.0,160.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":13,"Metadata":{"ScriptingName":"Sq.12","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[150.0,150.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":14,"Metadata":{"ScriptingName":"Sq.13","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[180.0,180.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":15,"Metadata":{"ScriptingName":"Sq.14","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[170.0,170.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":16,"Metadata":{"ScriptingName":"Sq.15","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[200.0,200.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":17,"Metadata":{"ScriptingName":"Sq.16","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[190.0,190.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":18,"Metadata":{"ScriptingName":"Sq.17","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[220.0,220.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":19,"Metadata":{"ScriptingName":"Sq.18","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[210.0,210.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":20,"Metadata":{"ScriptingName":"Sq.19","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[240.0,240.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":21,"Metadata":{"ScriptingName":"Sq.20","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[230.0,230.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":22,"Metadata":{"ScriptingName":"Sq.21","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[260.0,260.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":23,"Metadata":{"ScriptingName":"Sq.22","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[250.0,250.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":24,"Metadata":{"ScriptingName":"Sq.23","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[280.0,280.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":25,"Metadata":{"ScriptingName":"Sq.24","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[270.0,270.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":26,"Metadata":{"ScriptingName":"Sq.25","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[300.0,300.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":27,"Metadata":{"ScriptingName":"Sq.26","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[290.0,290.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":28,"Metadata":{"ScriptingName":"Sq.27","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[320.0,320.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":29,"Metadata":{"ScriptingName":"Sq.28","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[310.0,310.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":30,"Metadata":{"ScriptingName":"Sq.29","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[340.0,340.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":31,"Metadata":{"ScriptingName":"Sq.30","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[330.0,330.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":32,"Metadata":{"ScriptingName":"Sq.31","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[360.0,360.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":33,"Metadata":{"ScriptingName":"Sq.32","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[350.0,350.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":34,"Metadata":{"ScriptingName":"Sq.33","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[380.0,380.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":35,"Metadata":{"ScriptingName":"Sq.34","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[370.0,370.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":36,"Metadata":{"ScriptingName":"Sq.35","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[400.0,400.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":37,"Metadata":{"ScriptingName":"Sq.36","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[390.0,390.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":38,"Metadata":{"ScriptingName":"Sq.37","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[420.0,420.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":39,"Metadata":{"ScriptingName":"Sq.38","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[410.0,410.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":40,"Metadata":{"ScriptingName":"Sq.39","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[440.0,440.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":41,"Metadata":{"ScriptingName":"Sq.40","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[430.0,430.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":42,"Metadata":{"ScriptingName":"Sq.41","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[460.0,460.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":43,"Metadata":{"ScriptingName":"Sq.42","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[450.0,450.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":44,"Metadata":{"ScriptingName":"Sq.43","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[480.0,480.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":45,"Metadata":{"ScriptingName":"Sq.44","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[470.0,470.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":46,"Metadata":{"ScriptingName":"Sq.45","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[500.0,500.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":47,"Metadata":{"ScriptingName":"Sq.46","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[490.0,490.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":48,"Metadata":{"ScriptingName":"Sq.47","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[520.0,520.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":49,"Metadata":{"ScriptingName":"Sq.48","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[510.0,510.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":50,"Metadata":{"ScriptingName":"Sq.49","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[540.0,540.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]}],"SmallViewRack":[{"Processes":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"Process":null,"Height":413.0,"Nodal":true}],"FullViewRack":[{"Process":0,"Nodal":true}],"DefaultDuration":6703200000,"MinDuration":6703200000,"MaxDuration":4611686018427387903,"GuiDuration":7373520000,"Speed":1.0,"Rigidity":false,"MinNull":true,"MaxInf":true,"Signatures":[],"StartState":21,"EndState":22,"StartDate":1281948812,"HeightPercentage":0.5326666666666666,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":-1.0,"Center":0,"ViewMode":0,"SmallViewShown":false,"HasSignature":false},{"ObjectName":"Scenario::IntervalModel","id":11,"Metadata":{"ScriptingName":"Interval.sham67.5","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":1,"Metadata":{"ScriptingName":"Sq","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[40.0,40.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":2,"Metadata":{"ScriptingName":"Sq.1","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[60.0,60.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":3,"Metadata":{"ScriptingName":"Sq.2","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[50.0,50.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":4,"Metadata":{"ScriptingName":"Sq.3","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[80.0,80.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":5,"Metadata":{"ScriptingName":"Sq.4","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[70.0,70.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":6,"Metadata":{"ScriptingName":"Sq.5","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[100.0,100.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":7,"Metadata":{"ScriptingName":"Sq.6","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[90.0,90.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":8,"Metadata":{"ScriptingName":"Sq.7","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[120.0,120.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":9,"Metadata":{"ScriptingName":"Sq.8","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[110.0,110.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":10,"Metadata":{"ScriptingName":"Sq.9","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[140.0,140.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":11,"Metadata":{"ScriptingName":"Sq.10","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[130.0,130.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":12,"Metadata":{"ScriptingName":"Sq.11","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[160.0,160.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":13,"Metadata":{"ScriptingName":"Sq.12","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[150.0,150.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":14,"Metadata":{"ScriptingName":"Sq.13","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[180.0,180.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":15,"Metadata":{"ScriptingName":"Sq.14","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[170.0,170.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":16,"Metadata":{"ScriptingName":"Sq.15","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[200.0,200.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":17,"Metadata":{"ScriptingName":"Sq.16","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[190.0,190.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":18,"Metadata":{"ScriptingName":"Sq.17","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[220.0,220.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":19,"Metadata":{"ScriptingName":"Sq.18","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[210.0,210.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":20,"Metadata":{"ScriptingName":"Sq.19","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[240.0,240.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":21,"Metadata":{"ScriptingName":"Sq.20","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[230.0,230.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":22,"Metadata":{"ScriptingName":"Sq.21","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[260.0,260.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":23,"Metadata":{"ScriptingName":"Sq.22","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[250.0,250.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":24,"Metadata":{"ScriptingName":"Sq.23","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[280.0,280.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":25,"Metadata":{"ScriptingName":"Sq.24","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[270.0,270.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":26,"Metadata":{"ScriptingName":"Sq.25","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[300.0,300.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":27,"Metadata":{"ScriptingName":"Sq.26","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[290.0,290.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":28,"Metadata":{"ScriptingName":"Sq.27","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[320.0,320.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":29,"Metadata":{"ScriptingName":"Sq.28","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[310.0,310.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":30,"Metadata":{"ScriptingName":"Sq.29","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[340.0,340.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":31,"Metadata":{"ScriptingName":"Sq.30","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[330.0,330.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":32,"Metadata":{"ScriptingName":"Sq.31","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[360.0,360.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":33,"Metadata":{"ScriptingName":"Sq.32","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[350.0,350.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":34,"Metadata":{"ScriptingName":"Sq.33","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[380.0,380.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":35,"Metadata":{"ScriptingName":"Sq.34","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[370.0,370.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":36,"Metadata":{"ScriptingName":"Sq.35","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[400.0,400.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":37,"Metadata":{"ScriptingName":"Sq.36","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[390.0,390.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":38,"Metadata":{"ScriptingName":"Sq.37","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[420.0,420.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":39,"Metadata":{"ScriptingName":"Sq.38","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[410.0,410.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":40,"Metadata":{"ScriptingName":"Sq.39","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[440.0,440.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":41,"Metadata":{"ScriptingName":"Sq.40","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[430.0,430.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":42,"Metadata":{"ScriptingName":"Sq.41","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[460.0,460.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":43,"Metadata":{"ScriptingName":"Sq.42","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[450.0,450.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":44,"Metadata":{"ScriptingName":"Sq.43","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[480.0,480.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":45,"Metadata":{"ScriptingName":"Sq.44","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[470.0,470.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":46,"Metadata":{"ScriptingName":"Sq.45","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[500.0,500.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":47,"Metadata":{"ScriptingName":"Sq.46","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[490.0,490.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":48,"Metadata":{"ScriptingName":"Sq.47","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[520.0,520.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":49,"Metadata":{"ScriptingName":"Sq.48","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[510.0,510.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":50,"Metadata":{"ScriptingName":"Sq.49","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[540.0,540.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]}],"SmallViewRack":[{"Processes":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"Process":null,"Height":413.0,"Nodal":true}],"FullViewRack":[{"Process":0,"Nodal":true}],"DefaultDuration":6703200000,"MinDuration":6703200000,"MaxDuration":6703200000,"GuiDuration":7373520000,"Speed":1.0,"Rigidity":false,"MinNull":true,"MaxInf":true,"Signatures":[],"StartState":19,"EndState":20,"StartDate":929148812,"HeightPercentage":0.462,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":-1.0,"Center":0,"ViewMode":0,"SmallViewShown":false,"HasSignature":false},{"ObjectName":"Scenario::IntervalModel","id":10,"Metadata":{"ScriptingName":"Interval.java29","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[],"SmallViewRack":[],"FullViewRack":[],"DefaultDuration":2469600000,"MinDuration":2469600000,"MaxDuration":2469600000,"GuiDuration":3492720000,"Speed":1.0,"Rigidity":true,"MinNull":false,"MaxInf":false,"Signatures":[],"StartState":16,"EndState":14,"StartDate":0,"HeightPercentage":0.3753333333333333,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":-1.0,"Center":0,"ViewMode":0,"SmallViewShown":false,"HasSignature":false},{"ObjectName":"Scenario::IntervalModel","id":9,"Metadata":{"ScriptingName":"Interval.sham67.4","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":50,"Metadata":{"ScriptingName":"Sq.49","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[540.0,540.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":49,"Metadata":{"ScriptingName":"Sq.48","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[510.0,510.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":48,"Metadata":{"ScriptingName":"Sq.47","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[520.0,520.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":47,"Metadata":{"ScriptingName":"Sq.46","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[490.0,490.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":46,"Metadata":{"ScriptingName":"Sq.45","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[500.0,500.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":45,"Metadata":{"ScriptingName":"Sq.44","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[470.0,470.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":44,"Metadata":{"ScriptingName":"Sq.43","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[480.0,480.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":43,"Metadata":{"ScriptingName":"Sq.42","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[450.0,450.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":42,"Metadata":{"ScriptingName":"Sq.41","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[460.0,460.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":41,"Metadata":{"ScriptingName":"Sq.40","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[430.0,430.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":40,"Metadata":{"ScriptingName":"Sq.39","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[440.0,440.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":39,"Metadata":{"ScriptingName":"Sq.38","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[410.0,410.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":38,"Metadata":{"ScriptingName":"Sq.37","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[420.0,420.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":37,"Metadata":{"ScriptingName":"Sq.36","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[390.0,390.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":36,"Metadata":{"ScriptingName":"Sq.35","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[400.0,400.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":35,"Metadata":{"ScriptingName":"Sq.34","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[370.0,370.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":34,"Metadata":{"ScriptingName":"Sq.33","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[380.0,380.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":33,"Metadata":{"ScriptingName":"Sq.32","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[350.0,350.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":32,"Metadata":{"ScriptingName":"Sq.31","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[360.0,360.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":31,"Metadata":{"ScriptingName":"Sq.30","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[330.0,330.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":30,"Metadata":{"ScriptingName":"Sq.29","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[340.0,340.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":29,"Metadata":{"ScriptingName":"Sq.28","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[310.0,310.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":28,"Metadata":{"ScriptingName":"Sq.27","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[320.0,320.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":27,"Metadata":{"ScriptingName":"Sq.26","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[290.0,290.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":26,"Metadata":{"ScriptingName":"Sq.25","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[300.0,300.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":25,"Metadata":{"ScriptingName":"Sq.24","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[270.0,270.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":24,"Metadata":{"ScriptingName":"Sq.23","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[280.0,280.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":23,"Metadata":{"ScriptingName":"Sq.22","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[250.0,250.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":22,"Metadata":{"ScriptingName":"Sq.21","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[260.0,260.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":21,"Metadata":{"ScriptingName":"Sq.20","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[230.0,230.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":20,"Metadata":{"ScriptingName":"Sq.19","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[240.0,240.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":19,"Metadata":{"ScriptingName":"Sq.18","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[210.0,210.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":18,"Metadata":{"ScriptingName":"Sq.17","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[220.0,220.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":17,"Metadata":{"ScriptingName":"Sq.16","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[190.0,190.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":16,"Metadata":{"ScriptingName":"Sq.15","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[200.0,200.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":15,"Metadata":{"ScriptingName":"Sq.14","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[170.0,170.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":14,"Metadata":{"ScriptingName":"Sq.13","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[180.0,180.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":13,"Metadata":{"ScriptingName":"Sq.12","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[150.0,150.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":12,"Metadata":{"ScriptingName":"Sq.11","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[160.0,160.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":11,"Metadata":{"ScriptingName":"Sq.10","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[130.0,130.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":10,"Metadata":{"ScriptingName":"Sq.9","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[140.0,140.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":9,"Metadata":{"ScriptingName":"Sq.8","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[110.0,110.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":8,"Metadata":{"ScriptingName":"Sq.7","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[120.0,120.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":7,"Metadata":{"ScriptingName":"Sq.6","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[90.0,90.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":6,"Metadata":{"ScriptingName":"Sq.5","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[100.0,100.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":5,"Metadata":{"ScriptingName":"Sq.4","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[70.0,70.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":4,"Metadata":{"ScriptingName":"Sq.3","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[80.0,80.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":3,"Metadata":{"ScriptingName":"Sq.2","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[50.0,50.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":2,"Metadata":{"ScriptingName":"Sq.1","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[60.0,60.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":1,"Metadata":{"ScriptingName":"Sq","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[40.0,40.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]}],"SmallViewRack":[{"Processes":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"Process":null,"Height":413.0,"Nodal":true}],"FullViewRack":[{"Process":0,"Nodal":true}],"DefaultDuration":6703200000,"MinDuration":6703200000,"MaxDuration":4611686018427387903,"GuiDuration":7373520000,"Speed":1.0,"Rigidity":false,"MinNull":true,"MaxInf":true,"Signatures":[],"StartState":14,"EndState":15,"StartDate":2469600000,"HeightPercentage":0.3753333333333333,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":-1.0,"Center":0,"ViewMode":0,"SmallViewShown":false,"HasSignature":false},{"ObjectName":"Scenario::IntervalModel","id":8,"Metadata":{"ScriptingName":"Interval.ride46","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[],"SmallViewRack":[],"FullViewRack":[],"DefaultDuration":705600000,"MinDuration":705600000,"MaxDuration":705600000,"GuiDuration":776160000,"Speed":1.0,"Rigidity":true,"MinNull":false,"MaxInf":false,"Signatures":[],"StartState":13,"EndState":11,"StartDate":1058400000,"HeightPercentage":0.282,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":-1.0,"Center":0,"ViewMode":0,"SmallViewShown":false,"HasSignature":false},{"ObjectName":"Scenario::IntervalModel","id":7,"Metadata":{"ScriptingName":"Interval.sham67.3","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":50,"Metadata":{"ScriptingName":"Sq.49","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[540.0,540.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":49,"Metadata":{"ScriptingName":"Sq.48","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[510.0,510.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":48,"Metadata":{"ScriptingName":"Sq.47","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[520.0,520.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":47,"Metadata":{"ScriptingName":"Sq.46","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[490.0,490.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":46,"Metadata":{"ScriptingName":"Sq.45","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[500.0,500.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":45,"Metadata":{"ScriptingName":"Sq.44","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[470.0,470.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":44,"Metadata":{"ScriptingName":"Sq.43","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[480.0,480.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":43,"Metadata":{"ScriptingName":"Sq.42","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[450.0,450.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":42,"Metadata":{"ScriptingName":"Sq.41","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[460.0,460.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":41,"Metadata":{"ScriptingName":"Sq.40","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[430.0,430.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":40,"Metadata":{"ScriptingName":"Sq.39","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[440.0,440.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":39,"Metadata":{"ScriptingName":"Sq.38","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[410.0,410.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":38,"Metadata":{"ScriptingName":"Sq.37","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[420.0,420.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":37,"Metadata":{"ScriptingName":"Sq.36","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[390.0,390.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":36,"Metadata":{"ScriptingName":"Sq.35","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[400.0,400.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":35,"Metadata":{"ScriptingName":"Sq.34","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[370.0,370.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":34,"Metadata":{"ScriptingName":"Sq.33","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[380.0,380.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":33,"Metadata":{"ScriptingName":"Sq.32","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[350.0,350.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":32,"Metadata":{"ScriptingName":"Sq.31","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[360.0,360.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":31,"Metadata":{"ScriptingName":"Sq.30","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[330.0,330.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":30,"Metadata":{"ScriptingName":"Sq.29","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[340.0,340.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":29,"Metadata":{"ScriptingName":"Sq.28","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[310.0,310.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":28,"Metadata":{"ScriptingName":"Sq.27","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[320.0,320.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":27,"Metadata":{"ScriptingName":"Sq.26","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[290.0,290.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":26,"Metadata":{"ScriptingName":"Sq.25","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[300.0,300.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":25,"Metadata":{"ScriptingName":"Sq.24","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[270.0,270.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":24,"Metadata":{"ScriptingName":"Sq.23","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[280.0,280.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":23,"Metadata":{"ScriptingName":"Sq.22","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[250.0,250.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":22,"Metadata":{"ScriptingName":"Sq.21","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[260.0,260.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":21,"Metadata":{"ScriptingName":"Sq.20","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[230.0,230.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":20,"Metadata":{"ScriptingName":"Sq.19","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[240.0,240.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":19,"Metadata":{"ScriptingName":"Sq.18","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[210.0,210.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":18,"Metadata":{"ScriptingName":"Sq.17","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[220.0,220.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":17,"Metadata":{"ScriptingName":"Sq.16","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[190.0,190.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":16,"Metadata":{"ScriptingName":"Sq.15","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[200.0,200.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":15,"Metadata":{"ScriptingName":"Sq.14","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[170.0,170.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":14,"Metadata":{"ScriptingName":"Sq.13","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[180.0,180.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":13,"Metadata":{"ScriptingName":"Sq.12","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[150.0,150.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":12,"Metadata":{"ScriptingName":"Sq.11","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[160.0,160.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":11,"Metadata":{"ScriptingName":"Sq.10","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[130.0,130.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":10,"Metadata":{"ScriptingName":"Sq.9","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[140.0,140.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":9,"Metadata":{"ScriptingName":"Sq.8","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[110.0,110.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":8,"Metadata":{"ScriptingName":"Sq.7","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[120.0,120.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":7,"Metadata":{"ScriptingName":"Sq.6","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[90.0,90.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":6,"Metadata":{"ScriptingName":"Sq.5","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[100.0,100.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":5,"Metadata":{"ScriptingName":"Sq.4","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[70.0,70.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":4,"Metadata":{"ScriptingName":"Sq.3","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[80.0,80.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":3,"Metadata":{"ScriptingName":"Sq.2","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[50.0,50.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":2,"Metadata":{"ScriptingName":"Sq.1","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[60.0,60.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":1,"Metadata":{"ScriptingName":"Sq","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[40.0,40.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]}],"SmallViewRack":[{"Processes":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"Process":null,"Height":413.0,"Nodal":true}],"FullViewRack":[{"Process":0,"Nodal":true}],"DefaultDuration":6703200000,"MinDuration":6703200000,"MaxDuration":4611686018427387903,"GuiDuration":7373520000,"Speed":1.0,"Rigidity":false,"MinNull":true,"MaxInf":true,"Signatures":[],"StartState":11,"EndState":12,"StartDate":1764000000,"HeightPercentage":0.282,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":-1.0,"Center":0,"ViewMode":0,"SmallViewShown":false,"HasSignature":false},{"ObjectName":"Scenario::IntervalModel","id":6,"Metadata":{"ScriptingName":"Interval.bilk79","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[],"SmallViewRack":[],"FullViewRack":[],"DefaultDuration":1058400000,"MinDuration":1058400000,"MaxDuration":1058400000,"GuiDuration":1358280000,"Speed":1.0,"Rigidity":true,"MinNull":false,"MaxInf":false,"Signatures":[],"StartState":10,"EndState":8,"StartDate":0,"HeightPercentage":0.19666666666666685,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":-1.0,"Center":0,"ViewMode":0,"SmallViewShown":false,"HasSignature":false},{"ObjectName":"Scenario::IntervalModel","id":5,"Metadata":{"ScriptingName":"Interval.sham67.2","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":50,"Metadata":{"ScriptingName":"Sq.49","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[540.0,540.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":49,"Metadata":{"ScriptingName":"Sq.48","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[510.0,510.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":48,"Metadata":{"ScriptingName":"Sq.47","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[520.0,520.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":47,"Metadata":{"ScriptingName":"Sq.46","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[490.0,490.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":46,"Metadata":{"ScriptingName":"Sq.45","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[500.0,500.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":45,"Metadata":{"ScriptingName":"Sq.44","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[470.0,470.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":44,"Metadata":{"ScriptingName":"Sq.43","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[480.0,480.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":43,"Metadata":{"ScriptingName":"Sq.42","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[450.0,450.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":42,"Metadata":{"ScriptingName":"Sq.41","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[460.0,460.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":41,"Metadata":{"ScriptingName":"Sq.40","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[430.0,430.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":40,"Metadata":{"ScriptingName":"Sq.39","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[440.0,440.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":39,"Metadata":{"ScriptingName":"Sq.38","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[410.0,410.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":38,"Metadata":{"ScriptingName":"Sq.37","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[420.0,420.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":37,"Metadata":{"ScriptingName":"Sq.36","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[390.0,390.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":36,"Metadata":{"ScriptingName":"Sq.35","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[400.0,400.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":35,"Metadata":{"ScriptingName":"Sq.34","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[370.0,370.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":34,"Metadata":{"ScriptingName":"Sq.33","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[380.0,380.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":33,"Metadata":{"ScriptingName":"Sq.32","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[350.0,350.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":32,"Metadata":{"ScriptingName":"Sq.31","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[360.0,360.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":31,"Metadata":{"ScriptingName":"Sq.30","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[330.0,330.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":30,"Metadata":{"ScriptingName":"Sq.29","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[340.0,340.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":29,"Metadata":{"ScriptingName":"Sq.28","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[310.0,310.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":28,"Metadata":{"ScriptingName":"Sq.27","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[320.0,320.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":27,"Metadata":{"ScriptingName":"Sq.26","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[290.0,290.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":26,"Metadata":{"ScriptingName":"Sq.25","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[300.0,300.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":25,"Metadata":{"ScriptingName":"Sq.24","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[270.0,270.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":24,"Metadata":{"ScriptingName":"Sq.23","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[280.0,280.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":23,"Metadata":{"ScriptingName":"Sq.22","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[250.0,250.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":22,"Metadata":{"ScriptingName":"Sq.21","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[260.0,260.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":21,"Metadata":{"ScriptingName":"Sq.20","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[230.0,230.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":20,"Metadata":{"ScriptingName":"Sq.19","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[240.0,240.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":19,"Metadata":{"ScriptingName":"Sq.18","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[210.0,210.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":18,"Metadata":{"ScriptingName":"Sq.17","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[220.0,220.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":17,"Metadata":{"ScriptingName":"Sq.16","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[190.0,190.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":16,"Metadata":{"ScriptingName":"Sq.15","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[200.0,200.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":15,"Metadata":{"ScriptingName":"Sq.14","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[170.0,170.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":14,"Metadata":{"ScriptingName":"Sq.13","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[180.0,180.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":13,"Metadata":{"ScriptingName":"Sq.12","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[150.0,150.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":12,"Metadata":{"ScriptingName":"Sq.11","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[160.0,160.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":11,"Metadata":{"ScriptingName":"Sq.10","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[130.0,130.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":10,"Metadata":{"ScriptingName":"Sq.9","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[140.0,140.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":9,"Metadata":{"ScriptingName":"Sq.8","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[110.0,110.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":8,"Metadata":{"ScriptingName":"Sq.7","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[120.0,120.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":7,"Metadata":{"ScriptingName":"Sq.6","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[90.0,90.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":6,"Metadata":{"ScriptingName":"Sq.5","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[100.0,100.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":5,"Metadata":{"ScriptingName":"Sq.4","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[70.0,70.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":4,"Metadata":{"ScriptingName":"Sq.3","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[80.0,80.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":3,"Metadata":{"ScriptingName":"Sq.2","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[50.0,50.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":2,"Metadata":{"ScriptingName":"Sq.1","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[60.0,60.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":1,"Metadata":{"ScriptingName":"Sq","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[40.0,40.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]}],"SmallViewRack":[{"Processes":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"Process":null,"Height":413.0,"Nodal":true}],"FullViewRack":[{"Process":0,"Nodal":true}],"DefaultDuration":6703200000,"MinDuration":6703200000,"MaxDuration":4611686018427387903,"GuiDuration":7373520000,"Speed":1.0,"Rigidity":false,"MinNull":true,"MaxInf":true,"Signatures":[],"StartState":8,"EndState":9,"StartDate":1058400000,"HeightPercentage":0.19666666666666685,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":-1.0,"Center":0,"ViewMode":0,"SmallViewShown":false,"HasSignature":false},{"ObjectName":"Scenario::IntervalModel","id":4,"Metadata":{"ScriptingName":"Interval.hits26","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[],"SmallViewRack":[],"FullViewRack":[],"DefaultDuration":352800000,"MinDuration":352800000,"MaxDuration":352800000,"GuiDuration":943758555,"Speed":1.0,"Rigidity":true,"MinNull":false,"MaxInf":false,"Signatures":[],"StartState":7,"EndState":5,"StartDate":0,"HeightPercentage":0.13666666666666666,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":-1.0,"Center":0,"ViewMode":0,"SmallViewShown":false,"HasSignature":false},{"ObjectName":"Scenario::IntervalModel","id":3,"Metadata":{"ScriptingName":"Interval.sham67.1","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":50,"Metadata":{"ScriptingName":"Sq.49","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[540.0,540.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":49,"Metadata":{"ScriptingName":"Sq.48","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[510.0,510.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":48,"Metadata":{"ScriptingName":"Sq.47","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[520.0,520.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":47,"Metadata":{"ScriptingName":"Sq.46","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[490.0,490.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":46,"Metadata":{"ScriptingName":"Sq.45","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[500.0,500.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":45,"Metadata":{"ScriptingName":"Sq.44","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[470.0,470.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":44,"Metadata":{"ScriptingName":"Sq.43","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[480.0,480.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":43,"Metadata":{"ScriptingName":"Sq.42","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[450.0,450.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":42,"Metadata":{"ScriptingName":"Sq.41","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[460.0,460.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":41,"Metadata":{"ScriptingName":"Sq.40","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[430.0,430.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":40,"Metadata":{"ScriptingName":"Sq.39","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[440.0,440.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":39,"Metadata":{"ScriptingName":"Sq.38","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[410.0,410.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":38,"Metadata":{"ScriptingName":"Sq.37","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[420.0,420.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":37,"Metadata":{"ScriptingName":"Sq.36","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[390.0,390.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":36,"Metadata":{"ScriptingName":"Sq.35","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[400.0,400.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":35,"Metadata":{"ScriptingName":"Sq.34","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[370.0,370.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":34,"Metadata":{"ScriptingName":"Sq.33","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[380.0,380.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":33,"Metadata":{"ScriptingName":"Sq.32","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[350.0,350.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":32,"Metadata":{"ScriptingName":"Sq.31","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[360.0,360.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":31,"Metadata":{"ScriptingName":"Sq.30","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[330.0,330.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":30,"Metadata":{"ScriptingName":"Sq.29","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[340.0,340.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":29,"Metadata":{"ScriptingName":"Sq.28","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[310.0,310.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":28,"Metadata":{"ScriptingName":"Sq.27","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[320.0,320.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":27,"Metadata":{"ScriptingName":"Sq.26","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[290.0,290.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":26,"Metadata":{"ScriptingName":"Sq.25","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[300.0,300.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":25,"Metadata":{"ScriptingName":"Sq.24","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[270.0,270.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":24,"Metadata":{"ScriptingName":"Sq.23","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[280.0,280.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":23,"Metadata":{"ScriptingName":"Sq.22","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[250.0,250.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":22,"Metadata":{"ScriptingName":"Sq.21","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[260.0,260.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":21,"Metadata":{"ScriptingName":"Sq.20","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[230.0,230.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":20,"Metadata":{"ScriptingName":"Sq.19","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[240.0,240.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":19,"Metadata":{"ScriptingName":"Sq.18","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[210.0,210.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":18,"Metadata":{"ScriptingName":"Sq.17","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[220.0,220.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":17,"Metadata":{"ScriptingName":"Sq.16","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[190.0,190.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":16,"Metadata":{"ScriptingName":"Sq.15","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[200.0,200.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":15,"Metadata":{"ScriptingName":"Sq.14","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[170.0,170.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":14,"Metadata":{"ScriptingName":"Sq.13","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[180.0,180.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":13,"Metadata":{"ScriptingName":"Sq.12","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[150.0,150.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":12,"Metadata":{"ScriptingName":"Sq.11","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[160.0,160.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":11,"Metadata":{"ScriptingName":"Sq.10","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[130.0,130.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":10,"Metadata":{"ScriptingName":"Sq.9","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[140.0,140.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":9,"Metadata":{"ScriptingName":"Sq.8","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[110.0,110.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":8,"Metadata":{"ScriptingName":"Sq.7","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[120.0,120.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":7,"Metadata":{"ScriptingName":"Sq.6","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[90.0,90.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":6,"Metadata":{"ScriptingName":"Sq.5","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[100.0,100.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":5,"Metadata":{"ScriptingName":"Sq.4","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[70.0,70.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":4,"Metadata":{"ScriptingName":"Sq.3","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[80.0,80.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":3,"Metadata":{"ScriptingName":"Sq.2","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[50.0,50.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":2,"Metadata":{"ScriptingName":"Sq.1","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[60.0,60.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":1,"Metadata":{"ScriptingName":"Sq","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[40.0,40.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]}],"SmallViewRack":[{"Processes":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"Process":null,"Height":413.0,"Nodal":true}],"FullViewRack":[{"Process":0,"Nodal":true}],"DefaultDuration":6703200000,"MinDuration":6703200000,"MaxDuration":4611686018427387903,"GuiDuration":7373520000,"Speed":1.0,"Rigidity":false,"MinNull":true,"MaxInf":true,"Signatures":[],"StartState":5,"EndState":6,"StartDate":352800000,"HeightPercentage":0.13666666666666666,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":-1.0,"Center":0,"ViewMode":0,"SmallViewShown":false,"HasSignature":false},{"ObjectName":"Scenario::IntervalModel","id":1,"Metadata":{"ScriptingName":"Interval.sham67","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":50,"Metadata":{"ScriptingName":"Sq.49","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[540.0,540.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":49,"Metadata":{"ScriptingName":"Sq.48","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[510.0,510.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":48,"Metadata":{"ScriptingName":"Sq.47","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[520.0,520.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":47,"Metadata":{"ScriptingName":"Sq.46","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[490.0,490.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":46,"Metadata":{"ScriptingName":"Sq.45","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[500.0,500.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":45,"Metadata":{"ScriptingName":"Sq.44","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[470.0,470.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":44,"Metadata":{"ScriptingName":"Sq.43","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[480.0,480.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":43,"Metadata":{"ScriptingName":"Sq.42","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[450.0,450.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":42,"Metadata":{"ScriptingName":"Sq.41","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[460.0,460.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":41,"Metadata":{"ScriptingName":"Sq.40","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[430.0,430.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":40,"Metadata":{"ScriptingName":"Sq.39","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[440.0,440.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":39,"Metadata":{"ScriptingName":"Sq.38","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[410.0,410.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":38,"Metadata":{"ScriptingName":"Sq.37","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[420.0,420.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":37,"Metadata":{"ScriptingName":"Sq.36","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[390.0,390.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":36,"Metadata":{"ScriptingName":"Sq.35","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[400.0,400.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":35,"Metadata":{"ScriptingName":"Sq.34","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[370.0,370.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":34,"Metadata":{"ScriptingName":"Sq.33","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[380.0,380.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":33,"Metadata":{"ScriptingName":"Sq.32","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[350.0,350.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":32,"Metadata":{"ScriptingName":"Sq.31","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[360.0,360.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":31,"Metadata":{"ScriptingName":"Sq.30","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[330.0,330.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":30,"Metadata":{"ScriptingName":"Sq.29","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[340.0,340.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":29,"Metadata":{"ScriptingName":"Sq.28","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[310.0,310.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":28,"Metadata":{"ScriptingName":"Sq.27","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[320.0,320.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":27,"Metadata":{"ScriptingName":"Sq.26","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[290.0,290.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":26,"Metadata":{"ScriptingName":"Sq.25","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[300.0,300.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":25,"Metadata":{"ScriptingName":"Sq.24","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[270.0,270.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":24,"Metadata":{"ScriptingName":"Sq.23","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[280.0,280.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":23,"Metadata":{"ScriptingName":"Sq.22","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[250.0,250.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":22,"Metadata":{"ScriptingName":"Sq.21","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[260.0,260.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":21,"Metadata":{"ScriptingName":"Sq.20","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[230.0,230.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":20,"Metadata":{"ScriptingName":"Sq.19","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[240.0,240.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":19,"Metadata":{"ScriptingName":"Sq.18","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[210.0,210.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":18,"Metadata":{"ScriptingName":"Sq.17","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[220.0,220.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":17,"Metadata":{"ScriptingName":"Sq.16","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[190.0,190.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":16,"Metadata":{"ScriptingName":"Sq.15","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[200.0,200.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":15,"Metadata":{"ScriptingName":"Sq.14","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[170.0,170.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":14,"Metadata":{"ScriptingName":"Sq.13","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[180.0,180.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":13,"Metadata":{"ScriptingName":"Sq.12","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[150.0,150.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":12,"Metadata":{"ScriptingName":"Sq.11","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[160.0,160.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":11,"Metadata":{"ScriptingName":"Sq.10","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[130.0,130.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":10,"Metadata":{"ScriptingName":"Sq.9","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[140.0,140.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":9,"Metadata":{"ScriptingName":"Sq.8","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[110.0,110.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":8,"Metadata":{"ScriptingName":"Sq.7","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[120.0,120.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":7,"Metadata":{"ScriptingName":"Sq.6","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[90.0,90.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":6,"Metadata":{"ScriptingName":"Sq.5","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[100.0,100.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":5,"Metadata":{"ScriptingName":"Sq.4","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[70.0,70.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":4,"Metadata":{"ScriptingName":"Sq.3","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[80.0,80.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":3,"Metadata":{"ScriptingName":"Sq.2","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[50.0,50.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":2,"Metadata":{"ScriptingName":"Sq.1","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[60.0,60.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]},{"uuid":"0a3b49d6-4ce7-4668-aec3-9505b6ee1a60","ObjectName":"Jit","id":1,"Metadata":{"ScriptingName":"Sq","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":6703200000,"Height":300.0,"StartOffset":0,"LoopDuration":6703200000,"Pos":[40.0,40.0],"Size":[100.0,100.0],"Loops":false,"Text":"\n#include <ossia/dataflow/data.hpp>\n#include <ossia/dataflow/graph_node.hpp>\n#include <ossia/dataflow/port.hpp>\n\n#include <vector>\n\nstruct example : ossia::nonowning_graph_node {\n  ossia::audio_outlet out; \n  int period[2]{};\n  int cur[2]{};\n  bool phase[2]{};\n  \n  example()\n  {\n    m_outlets.push_back(&out);\n    \n    period[0] = 1 + abs(rand() % 15000);\n    period[1] = 1 + abs(rand() % 15000);\n  }\n\n  void run(\n      const ossia::token_request& t,\n      ossia::exec_state_facade st) noexcept override\n  {\n    const auto [first_pos, N] = st.timings(t);\n    constexpr auto channels = 2;\n\n    out->set_channels(channels);\n    for (std::size_t i = 0; i < channels; i++)\n    {\n      auto& out_c = out->channel(i);\n\n      out_c.resize(st.bufferSize());\n      auto buf = out_c.data();\n      for(int j = first_pos; j < N; j++) {\n          buf[j] = phase[i] ? -0.005 : 0.005;\n\n          ++cur[i];\n          if(cur[i] == period[i]) {\n              phase[i] = !phase[i];\n              cur[i] = 0;\n        }            \n      }\n    }\n  }\n};\n\nextern \"C\" ossia::graph_node* score_graph_node_factory() {\n  return new example;\n}\n","Inlets":[],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":1,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":20001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]}],"SmallViewRack":[{"Processes":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"Process":null,"Height":413.0,"Nodal":true}],"FullViewRack":[{"Process":0,"Nodal":true}],"DefaultDuration":6703200000,"MinDuration":6703200000,"MaxDuration":6703200000,"GuiDuration":7373520000,"Speed":1.0,"Rigidity":false,"MinNull":true,"MaxInf":true,"Signatures":[],"StartState":1,"EndState":2,"StartDate":0,"HeightPercentage":0.066,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":-1.0,"Center":0,"ViewMode":0,"SmallViewShown":false,"HasSignature":false}],"Comments":[]}],"SmallViewRack":[],"FullViewRack":[{"Process":1,"Nodal":false}],"DefaultDuration":10584000000,"MinDuration":10584000000,"MaxDuration":11113200000,"GuiDuration":11642400000,"Speed":1.0,"Rigidity":false,"MinNull":false,"MaxInf":true,"Signatures":[[0,[4,4]]],"StartState":0,"EndState":1,"StartDate":0,"HeightPercentage":0.0,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":9336327.185244586,"Center":5797970949,"ViewMode":0,"SmallViewShown":false,"HasSignature":true},"StartTimeNode":{"ObjectName":"Scenario::TimeSyncModel","id":0,"Metadata":{"ScriptingName":"Sync.start","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":0,"Events":[0],"MusicalSync":-1.0,"AutoTrigger":false,"Start":true,"Active":false,"Expression":" { true == false } "},"EndTimeNode":{"ObjectName":"Scenario::TimeSyncModel","id":1,"Metadata":{"ScriptingName":"Sync.end","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":10584000000,"Events":[1],"MusicalSync":-1.0,"AutoTrigger":false,"Start":false,"Active":true,"Expression":" { true == false } "},"StartEvent":{"ObjectName":"Scenario::EventModel","id":0,"Metadata":{"ScriptingName":"Event.start","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":0,"States":[0],"Condition":"","Date":0,"Offset":0},"EndEvent":{"ObjectName":"Scenario::EventModel","id":1,"Metadata":{"ScriptingName":"Event.end","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":1,"States":[1],"Condition":"","Date":10584000000,"Offset":0},"StartState":{"ObjectName":"Scenario::StateModel","id":0,"Metadata":{"ScriptingName":"State.start","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":0,"PreviousConstraint":null,"NextConstraint":0,"HeightPercentage":0.0,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},"EndState":{"ObjectName":"Scenario::StateModel","id":1,"Metadata":{"ScriptingName":"State.end","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":1,"PreviousConstraint":0,"NextConstraint":null,"HeightPercentage":0.0,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]}},"Speed":1.0,"Cables":[],"BusIntervals":[]},"Plugins":[{"uuid":"1f923578-08c3-49be-9ba9-69c144ee2e32","Refresh":false,"Reconnect":false,"MidiRatio":1.0},{"uuid":"6e610e1f-9de2-4c36-90dd-0ef570002a21","RootNode":{},"Children":[]}],"Version":4,"Commit":"f0e83cd24eda841434c6c51d52bc1b19ca285747","Tag":"3.0.1"}